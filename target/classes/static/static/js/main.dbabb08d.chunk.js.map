{"version":3,"sources":["Components/history.js","Routes/CustomRouter.js","services/getNameService.js","services/getImageService.js","services/authenticationService.js","auth/LoginForm.js","Components/MyToast.js","Components/CustomAvatarEditor.js","auth/RegistrationForm.js","Components/UserModal.js","Components/AppNavbar.js","Components/Landing.js","images/alpinelake_bg.jpg","images/book_background.jpg","Pages/Home.js","helpers/auth-header.js","Components/PostList.js","helpers/Pagination.js","Pages/Posts.js","Components/RichTextEditor.js","Components/ProfileEdit.js","Pages/Profile.js","Pages/RegistrationSuccess.js","Routes/withRouter.js","Components/PostEdit.js","Components/CommentBox.js","Components/CommentList.js","Components/PostView.js","InnerApp.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","CustomRouter","history","props","useState","action","location","state","setState","useLayoutEffect","listen","navigationType","navigator","currentNameSubject","BehaviorSubject","currentRoleSubject","getNameService","setName","name","next","localStorage","setItem","currentName","asObservable","currentNameValue","getItem","value","setRole","role","JSON","stringify","currentRole","currentRoleValue","parse","currentImageSubject","getImageService","setImage","image","currentImage","currentImageValue","currentUserSubject","authenticationService","login","logout","getUsernameFromJWT","user","token","parseJwt","sub","verifyLogin","resendVerificationEmail","verificationError","loggedIn","currentUser","currentUserValue","atob","split","e","a","cookies","Cookies","response","console","log","decodedJwt","exp","Date","now","removeItem","username","cookieValue","get","key","params","axios","post","headers","then","data","catch","err","password","refresh_token_data","roles","put","avatar","set","path","maxAge","secure","getAll","remove","getNameSvc","getImgSvc","LoginForm","resetUser","email","userChange","event","target","onKeyDown","handleSubmit","show","loginFail","bind","auth","this","promise","strBase64File","push","Card","className","Form","onReset","id","Header","Body","Group","as","Col","controlId","Label","Control","required","autoComplete","type","onChange","placeholder","Footer","style","Alert","Button","size","variant","onClick","icon","faSave","Component","CustomAvatarEditor","React","setEditorRef","editor","handleScale","scale","parseFloat","onCrop","showModal","showImagePickerModal","allowZoomOut","showImagePicker","closeImagePicker","saveImage","success","img","getImageScaledToCanvas","toDataURL","imageSaved","modalClose","borderRadius","imageUrl","Container","Row","md","Modal","marginLeft","maxWidth","onHide","centered","marginTop","ref","width","height","border","color","min","max","step","defaultValue","extensions","dims","minWidth","minHeight","maxHeight","base64","onError","errMsg","marginBottom","class","RegistrationForm","initialState","fullname","password_confirmation","registrationSuccess","redirect","goToRegistration","errors","resetErrors","createNewUser","newUser","confirmPassword","message","handleChange","onClose","nextProps","preventDefault","error","to","displayLogin","onSubmit","isInvalid","Feedback","faUndo","UserModal","isLoggedIn","handleClose","subscribe","getCurrentUserValue","closeButton","Title","AppNavbar","isOpen","displayDropdown","redirectToLogin","redirectToPosts","redirectToProfile","toggle","loginLinkName","isDlgOpen","onClickPostRedirect","onClickProfileRedirect","subscriptionLogOut","subscriptionProfileDropdown","subscriptionImageSet","unsubscribe","Navbar","expand","NavbarBrand","fontSize","fontFamily","textDecoration","Nav","marginRight","round","src","Dropdown","Toggle","Menu","Item","Landing","update","ReactDOM","findDOMNode","refs","getBoundingClientRect","window","innerHeight","innerWidth","onCloseDlg","resetHomePageProps","redirectLogicActive","openLoginDlg","openRegisterDlg","outline","Home","useLocation","index","setIndex","nav","setNav","setForceRender","useCallback","ResetHomePageProps","forceRender","Carousel","activeIndex","onSelect","selectedIndex","backgroundImage","loginBackground","backgroundSize","blogBackground","authHeader","PostList","posts","delete","updatePosts","isLoading","postList","map","body","stateToHTML","convertFromRaw","d","modifiedAt","date","toLocaleDateString","month","moment","format","textColor","pathname","title","author","renderHTML","Pagination","currentPage","itemsPerPage","itemCount","totalPages","getCurrentStartIndex","getCurrentEndIndex","goToNextPage","goToPrevPage","setItemCount","setTotalPages","Math","ceil","Posts","redirectToPostView","subscriptionRole","updatePagination","result","res","sort","b","length","getCurrentPage","slice","currRole","roleName","prevButtonDisabled","isFirstPage","nextButtonDisabled","isLastPage","fluid","disabled","faArrowLeft","faArrowRight","RichTextEditor","setDomEditorRef","domEditor","handleKeyCommand","editorState","focus","command","newState","RichUtils","cursor","ProfileEdit","onChangeRichTextEditor","newEditorState","avatarEditorImage","postImage","profile","heading","EditorState","createEmpty","updateEditor","contentLoaded","initialFormState","submitDisabled","displayAvatarEditor","closeAvatarEditor","postImagetoImgBB","postImageToImgBB","getBase64Image","imgUrl","updatedClient","profileHeading","profileInfo","convertToRaw","getCurrentContent","requestBody","getImageSvc","client","createWithContent","getClient","originalName","originalHeading","originalBody","replace","form","FormData","append","url","iconUrl","checkFormState","for","tag","Link","Profile","setIsLoading","getLogin","resolved","position","RegistrationSuccess","setRedirect","withRouter","Child","navigate","useNavigate","useParams","PostEdit","emptyItem","post_id","item","ContentState","createFromText","CommentBox","onExpand","isExpanded","outerHeight","document","scrollHeight","commentValue","handleCommentValue","submitCommentLine","enterCommentLine","cn","expanded","collapsed","modified","alt","htmlFor","onFocus","CommentList","renderTooltip","Popover","popper","options","commentListSorted","commentCount","upVotes","downVotes","isUpVotingDisabled","isDownVotingDisabled","commentList","votes","upVoteCount","downVoteCount","forEach","vote","voteType","comments","commentProfiles","incrementDownVote","incrementUpVote","upVoteDisabled","downVoteDisabled","icons","removeComment","currentUsername","count","createdAt","val","dateStr","posterUsername","tallyVotes","commentText","ListGroup","OverlayTrigger","placement","delay","hide","overlay","popperConfig","posterName","commentName","alignItems","faArrowAltCircleUp","FormLabel","faArrowAltCircleDown","refreshCommentList","commentCounter","PostView","setCommentLine","charCode","onCommentClose","currentCount","usersVoted","updateUserVoted","getPostAndComments","getUserProfiles","pop","usernameSet","Set","comment","Object","keys","add","usernameArr","Array","from","imageData","postId","commentId","updateCommentsWithVote","setCommentWithVotes","updatedComments","vote_pushed","tmp_vote","com","submitComment","savedComment","findIndex","splice","newComment","setComment","updatedComment","method","currComments","commentIndex","bodyHTML","InnerApp","element","redirectTo","PureComponent","App","existingTokens","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dbabb08d.chunk.js","sourcesContent":["//src/history.js\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n\r\n\r\n","import {Router} from 'react-router-dom';\r\nimport {useLayoutEffect, useState} from 'react';\r\nexport const CustomRouter = ({ history, ...props }) => {\r\n  const [state, setState] = useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n\r\n  useLayoutEffect(() => history.listen(setState), [history]);\r\n\r\n  return (\r\n    <Router\r\n      {...props}\r\n      location={state.location}\r\n      navigationType={state.action}\r\n      navigator={history}\r\n    />\r\n  );\r\n}","import {BehaviorSubject} from 'rxjs';\r\nconst currentNameSubject = new BehaviorSubject();\r\nconst currentRoleSubject = new BehaviorSubject();\r\n\r\nexport const getNameService = {\r\n    setName,\r\n    currentName: currentNameSubject.asObservable(),\r\n    get currentNameValue() {\r\n        var name = localStorage.getItem(\"name\");\r\n        if(name) return name;\r\n        else return currentNameSubject.value;\r\n    },\r\n    setRole,\r\n    currentRole: currentRoleSubject.asObservable(),\r\n    get currentRoleValue() {\r\n        var role = localStorage.getItem(\"role\");\r\n        if(role) return JSON.parse(role);\r\n        else return currentRoleSubject.value;\r\n    }\r\n}\r\n\r\nfunction setRole(role) {\r\n    currentRoleSubject.next(role);\r\n    localStorage.setItem(\"role\", JSON.stringify(role));\r\n}\r\nfunction setName(name) {\r\n    currentNameSubject.next(name);\r\n    localStorage.setItem(\"name\", name)\r\n}","import {BehaviorSubject} from 'rxjs';\r\nconst currentImageSubject = new BehaviorSubject();\r\n\r\nexport const getImageService = {\r\n    setImage,\r\n    currentImage: currentImageSubject.asObservable(),\r\n    get currentImageValue() {\r\n        var image = localStorage.getItem(\"dataUrl\");\r\n        if(image) return JSON.parse(image);\r\n        else return currentImageSubject.value;\r\n    }\r\n}\r\n\r\nfunction setImage(image) {\r\n    currentImageSubject.next(image);\r\n    localStorage.setItem(\"dataUrl\", JSON.stringify(image));\r\n}\r\n","import {BehaviorSubject} from \"rxjs\"\r\nimport axios from 'axios';\r\nimport history from '../Components/history'\r\nimport Cookies from 'universal-cookie';\r\nimport {getNameService as getNameSvc} from './getNameService';\r\nimport {getImageService as getImgSvc} from './getImageService';\r\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n//const loggedIn = new BehaviorSubject(false);\r\n\r\nexport const authenticationService = {\r\n    login,\r\n    logout,\r\n    getUsernameFromJWT,\r\n    verifyLogin,\r\n    resendVerificationEmail,\r\n    verificationError: false,\r\n    loggedIn: localStorage.getItem('currentUser') ? true: false,\r\n    currentUser: currentUserSubject.asObservable(),\r\n    get currentUserValue() { return currentUserSubject.value}\r\n}\r\n\r\nconst parseJwt = (token) => {\r\n  try {\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction getUsernameFromJWT() {\r\n    if(localStorage.getItem('currentUser')) {\r\n      const user = JSON.parse(localStorage.getItem('currentUser')).token;\r\n      return parseJwt(user).sub; \r\n    } else return \"\";\r\n}\r\n\r\nasync function verifyLogin() {\r\n\r\n      const cookies = new Cookies();\r\n      const user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n      var response = null;\r\n      //console.log(user);\r\n      console.log(\"verifyLogin\", user);\r\n      if (user) {\r\n        const decodedJwt = parseJwt(user.token);\r\n        console.log(\"Decoded JWT\", decodedJwt);\r\n        if (decodedJwt.exp * 1000 < Date.now()) {\r\n          localStorage.removeItem('currentUser');\r\n          const username = decodedJwt.sub;\r\n          const cookieValue = cookies.get(\"refresh_token\").key;\r\n\r\n          let params = {\r\n            username,\r\n            cookieValue\r\n          };\r\n          console.log(\"JWT expired, create new JWT using refresh token\", params);\r\n          await axios.post(\"/auth/refresh_token/update\", params,\r\n            {\r\n                headers: { \"Content-Type\": \"application/json\"\r\n                }\r\n          })\r\n          .then(response => {\r\n            localStorage.setItem('currentUser', JSON.stringify(response.data));\r\n            currentUserSubject.next(JSON.parse(localStorage.getItem('currentUser')));\r\n            console.log(\"jwt refreshed\", response.data);\r\n            return response;\r\n          }).catch(err=> {\r\n            logout();\r\n          })\r\n\r\n     }\r\n\r\n    }\r\n    response = \"DONE\"\r\n    return response;\r\n}\r\nasync function resendVerificationEmail(username, password) {\r\n  await axios.post('/auth/reverify', {username, password})\r\n    .then(response => {\r\n      console.log(response);\r\n    }).catch(err => console.log(err))\r\n}\r\nasync function login(username, password) {\r\n    const cookies = new Cookies();\r\n    var refresh_token_data = \"\";\r\n    var name = \"\";\r\n    var roles = \"\";\r\n    var image = \"\";\r\n//    console.log(JSON.stringify({username, password}));\r\n//    const requestOptions = {\r\n//        method: 'PUT',\r\n//        credentials: 'include',\r\n//        headers: {\r\n//\r\n//                    'Content-Type': 'application/json',\r\n//                    'Accept': 'application/json'\r\n//        },\r\n//        redirect: 'follow',\r\n//        body: JSON.stringify({ username, password })\r\n//    };\r\n    await axios.put('/auth/login', {username, password})\r\n    .then(response => {\r\n        console.log(response.data);\r\n        localStorage.setItem('currentUser', JSON.stringify(response.data));\r\n        name = response.data.username;\r\n        roles = response.data.roles;\r\n        image = response.data.avatar;\r\n        authenticationService.loggedIn = true;\r\n        currentUserSubject.next(JSON.parse(localStorage.getItem('currentUser')));\r\n        console.log(\"loggedIn\", authenticationService.loggedIn)\r\n    }).catch(err => { console.log(err.response.data)\r\n        if(err.response.data === \"Client not enabled\") authenticationService.verificationError = true;\r\n        authenticationService.loggedIn = false;\r\n    });\r\n\r\n    if(authenticationService.loggedIn === true) {\r\n        //console.log(username)\r\n        await axios.post(\"/auth/refresh_token/generate\", username,\r\n        {\r\n            headers: { \"Content-Type\": \"text/plain\"},\r\n\r\n        }).then(response => {\r\n           console.log(response.data);\r\n           refresh_token_data = response.data;\r\n\r\n        })\r\n    }\r\n    if(refresh_token_data) {\r\n        console.log(\"SetCookie refresh_token\", refresh_token_data);\r\n\r\n        cookies.set(refresh_token_data.name, {\r\n            key: refresh_token_data.value},\r\n            {path: '/',\r\n             maxAge: refresh_token_data.maxAge,\r\n             secure: refresh_token_data.secure});\r\n        console.log(cookies.getAll());\r\n    }\r\n\r\n    console.log(\"AuthenticationService Login\", image);\r\n    return {name, roles, image};\r\n\r\n}\r\n\r\nfunction logout() {\r\n    const cookies = new Cookies();\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    cookies.remove('refresh_token', {path: '/'})\r\n    authenticationService.loggedIn = false;\r\n    getNameSvc.setName(\"\");\r\n    getNameSvc.setRole(\"\");\r\n    getImgSvc.setImage(\"\");\r\n    currentUserSubject.next(null);\r\n    localStorage.removeItem(\"role\");\r\n    localStorage.removeItem(\"name\");\r\n    localStorage.removeItem(\"dataUrl\");\r\n}\r\n","import React, { Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import Input from '../Input'\r\nimport {Card,Form,Button,Col, Alert} from \"react-bootstrap\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSave,faPlusSquare,faUndo} from \"@fortawesome/free-solid-svg-icons\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getImageService as getImgSvc} from '../services/getImageService'\r\nimport history from '../Components/history';\r\nimport Cookies from 'universal-cookie';\r\nimport {getNameService as getNameSvc} from '../services/getNameService'\r\nexport default class LoginForm extends Component {\r\n\r\n    //...\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {email: \"\", password: \"\", show: false, loginFail: false,\r\n            verificationError: false};\r\n\r\n//        if(props.error) {\r\n//            this.state = {\r\n//              failure: 'wrong username or password!',\r\n//              errcount: 0\r\n//            }\r\n//        } else {\r\n//            this.state = { errcount: 0 }\r\n//        }\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n          this.resendVerificationEmail = this.resendVerificationEmail.bind(this);\r\n    }\r\n\r\n    resetUser=() => {\r\n    this.setState({email: \"\", password: \"\"});\r\n    }\r\n\r\n    async resendVerificationEmail() {\r\n        const promise = await auth.resendVerificationEmail(this.state.email, this.state.password);\r\n        \r\n        this.setState({verificationError: false});\r\n    }\r\n    async handleSubmit(event) {\r\n        var image = \"\";\r\n        //console.log(this.state.password);\r\n        const promise = await auth.login(this.state.email, this.state.password)\r\n        console.log(\"Loginform\", auth.loggedIn);\r\n        console.log(promise);\r\n        if(auth.loggedIn) {\r\n            getNameSvc.setName(promise.name);\r\n            getNameSvc.setRole(promise.roles[0]);\r\n            if(promise.image) getImgSvc.setImage(promise.image.strBase64File)\r\n\r\n            this.setState({loginFail: false});;\r\n            history.push('/posts');\r\n        }\r\n        else {\r\n            \r\n            if(auth.verificationError) {\r\n                this.setState({verificationError: true})\r\n            }\r\n            else this.setState({password: \"\", loginFail: true});\r\n        }\r\n    }\r\n\r\n\r\n//    handleError = (field, errmsg) => {\r\n//        if(!field) return\r\n//\r\n//        if(errmsg) {\r\n//            this.setState((prevState) => ({\r\n//                failure: '',\r\n//                errcount: prevState.errcount + 1,\r\n//                errmsgs: {...prevState.errmsgs, [field]: errmsg}\r\n//            }))\r\n//        } else {\r\n//            this.setState((prevState) => ({\r\n//                failure: '',\r\n//                errcount: prevState.errcount===1? 0 : prevState.errcount-1,\r\n//                errmsgs: {...prevState.errmsgs, [field]: ''}\r\n//            }))\r\n//        }\r\n//    }\r\n\r\n    userChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    };\r\n\r\n    onKeyDown = (event) => {\r\n        if(event.key === 'Enter') this.handleSubmit();\r\n\r\n    }\r\n//    renderError = () => {\r\n//        if(this.state.errcount || this.state.failure) {\r\n//            const errmsg = this.state.failure\r\n//              || Object.values(this.state.errmsgs).find(v=>v)\r\n//            return <div className=\"error\">{errmsg}</div>\r\n//        }\r\n//    }\r\n    render() {\r\n        let {email, password} = this.state;\r\n        if(this.props.username) email = this.props.username;    \r\n        return(\r\n            <div>\r\n            <Card className={\"border border-dark bg-dark text-white\"}>\r\n                <Form onReset={this.resetUser} id=\"userFormId\">\r\n                <Card.Header>\r\n\r\n                </Card.Header>\r\n                <Card.Body>\r\n\r\n\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridemail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.userChange}\r\n\r\n                onKeyDown={this.onKeyDown}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Email\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={this.userChange}\r\n                onKeyDown={this.onKeyDown}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Password\" />\r\n                \r\n                </Form.Group>\r\n\r\n                <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                {this.state.loginFail ? <Alert key='danger'> Invalid Credentials </Alert> : <div/>}\r\n                {this.state.verificationError ?\r\n                    <div> \r\n                    <Alert key='info'>\r\n                        Verification Failed, send new confirmation link?\r\n                        <Button size=\"sm\" variant=\"secondary\" onClick={this.resendVerificationEmail}>\r\n                            Resend Email\r\n                        </Button>\r\n                    </Alert>\r\n                    </div> : <div/>\r\n                }\r\n                <Button size=\"sm\" variant=\"primary\" onClick={this.handleSubmit}>\r\n                <FontAwesomeIcon icon={faSave} />Submit\r\n                </Button>{\" \"}\r\n                </Card.Footer>\r\n                </Card.Body>\r\n                </Form>\r\n            </Card>\r\n            </div>\r\n    \t);\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  name: PropTypes.string,\r\n  action: PropTypes.string,\r\n  method: PropTypes.string,\r\n  inputs: PropTypes.array,\r\n  error: PropTypes.string\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Modal} from \"react-bootstrap\";\r\nexport default class MyToast extends Component{\r\n\r\nrender(){\r\n\r\n    return(\r\n    <div>\r\n    <Modal show={this.props.children.show}>\r\n    <Modal.Header className={\"bg-success text-white\"} closeButton={true}>\r\n    <strong className=\"mr-auto\">Registration Successful</strong>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n    {this.props.children.message}\r\n    </Modal.Body>\r\n    </Modal>\r\n    </div>\r\n    )\r\n}}","import React, {Component, useState} from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport {ImagePicker} from 'react-file-picker'\r\nimport {Container, CloseButton, Button, Modal, Row, Col } from \"react-bootstrap\"\r\nimport ModalDialog from 'react-bootstrap/ModalDialog';\r\nimport Draggable from 'react-draggable'\r\nimport \"../Styles/AvatarEditor.scss\"\r\n\r\nclass DraggableModalDialog extends React.Component {\r\n\trender() {\r\n\t\treturn <Draggable handle=\".modal-title\"><ModalDialog {...this.props} /></Draggable>\r\n\t}\r\n}\r\n\r\n\r\nclass CustomAvatarEditor extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        image: \"\",\r\n        showModal: false,\r\n        showImagePickerModal: true,\r\n        allowZoomOut: false,\r\n        scale: 1\r\n    }\r\n    this.showImagePicker = this.showImagePicker.bind(this);\r\n    this.closeImagePicker = this.closeImagePicker.bind(this);\r\n    this.saveImage = this.saveImage.bind(this);\r\n  }\r\n\r\n\r\n  setEditorRef = (editor) => (this.editor = editor)\r\n  showImagePicker() {\r\n      this.setState({showImagePickerModal: true});\r\n  }\r\n\r\n  handleScale = (e) => {\r\n    const scale = parseFloat(e.target.value)\r\n    this.setState({ scale })\r\n  }\r\n\r\n  onCrop = () => {\r\n\r\n  }\r\n  closeImagePicker(success) {\r\n\r\n    this.setState({showImagePickerModal: false})\r\n    if(success) this.props.setImage(this.state.image);\r\n  }\r\n\r\n  saveImage() {\r\n    const img = this.editor.getImageScaledToCanvas().toDataURL();\r\n    this.props.imageSaved(img);\r\n    this.props.modalClose();\r\n  }\r\n  render() {\r\n\r\n    const imageUrl = this.props.image;\r\n    const showModal= this.props.showModal;\r\n    const modalClose = this.props.modalClose;\r\n    const setImage = this.props.setImage;\r\n    var borderRadius\r\n\r\n    if(imageUrl) borderRadius = 125;\r\n    else borderRadius = 0;\r\n    //console.log(\"Avatar Editor render\", imageUrl, showModal, modalClose);\r\n    return (\r\n       <div>\r\n       <Container>\r\n         <Row className=\"justify-content-md-center\">\r\n            <Col md=\"auto\">\r\n                <Modal\r\n                    style={{\r\n                        marginLeft: \"150px\",\r\n                        maxWidth: \"300px\"}}\r\n                    show={showModal} onHide={modalClose}\r\n                    centered>\r\n                    <Container className=\"justify-content-md-center gradientContainer\">\r\n                        {imageUrl ?\r\n                            (\r\n                                <div>\r\n                                <Row style={{marginTop: \"10px\"}}\r\n                                    className=\"justify-content-md-center\">\r\n                                    <Col md=\"auto\">\r\n                                        <AvatarEditor\r\n                                            ref={this.setEditorRef}\r\n                                            image={imageUrl}\r\n                                            width={250}\r\n                                            height={250}\r\n                                            border={2}\r\n                                            scale={this.state.scale}\r\n                                            borderRadius={borderRadius}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <br/>\r\n                                        <h1 style={{color: \"white\"}}><b>Zoom</b>:</h1>\r\n                                        <input\r\n                                          name=\"scale\"\r\n                                          type=\"range\"\r\n                                          onChange={this.handleScale}\r\n                                          min={this.state.allowZoomOut ? '0.1' : '1'}\r\n                                          max=\"2\"\r\n                                          step=\"0.01\"\r\n                                          defaultValue=\"1\"\r\n                                        />\r\n\r\n\r\n                                </Row>\r\n                                </div>\r\n                            )\r\n                        : <div/> }\r\n                        <Row className=\"justify-content-md-center\">\r\n                            <Col md=\"auto\">\r\n\r\n                                 <ImagePicker\r\n                                 extensions={['jpg', 'jpeg', 'png']}\r\n                                 dims={{minWidth: 100, maxWidth: 500, minHeight: 100, maxHeight: 500}}\r\n\r\n                                 onChange={base64 => {\r\n                                     console.log(\"Image chosen:\", base64);\r\n                                     this.state.image =  base64\r\n                                     this.closeImagePicker(true);\r\n                                     }\r\n                                 }\r\n                                 onError={errMsg => {\r\n                                     console.log(\"Image error:\", errMsg);\r\n                                     this.state.image = \"\"\r\n                                     this.closeImagePicker(false);\r\n                                     }\r\n                                 }\r\n                                 >\r\n\r\n                                 <Button\r\n                                    color=\"secondary\">\r\n                                   Choose Image\r\n                                 </Button>\r\n                                 </ImagePicker>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"justify-content-md-center\"\r\n                            style={{marginTop : \"10px\", marginBottom: \"5px\"}}>\r\n                            <Col md=\"auto\">\r\n                            {imageUrl ?\r\n                                <Button class=\"secondary\" onClick={this.saveImage}>\r\n                                    Save Image\r\n                                </Button>\r\n                                : <div/>\r\n                            }\r\n                            </Col>\r\n                         </Row>\r\n                         <Row >\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </Modal>\r\n            </Col>\r\n         </Row>\r\n\r\n\r\n\r\n      </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CustomAvatarEditor","import React, { Component } from 'react'\r\nimport {Navigate} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../Styles/App.scss'\r\nimport axios from \"axios\";\r\n//import { GET_ERRORS } from \"./types\";\r\nimport {Container, Card,Form,Button,Col,Modal} from \"react-bootstrap\"\r\n                            import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n                            import {faSave,faPlusSquare,faUndo} from \"@fortawesome/free-solid-svg-icons\"\r\nimport MyToast from '../Components/MyToast'\r\nimport {Link} from \"react-router-dom\"\r\nimport history from '../Components/history';\r\nimport CustomAvatarEditor from '../Components/CustomAvatarEditor';\r\nimport {ImagePicker} from 'react-file-picker';\r\n\r\nexport default class RegistrationForm extends Component {\r\n\r\n    //...\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.show = false;\r\n        this.message = \"\";\r\n        const {onClose} = props;\r\n//        if(props.error) {\r\n//            this.state = {\r\n//              failure: 'wrong username or password!',\r\n//              errcount: 0\r\n//            }\r\n//        } else {\r\n//            this.state = { errcount: 0 }\r\n//        }\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n          this.handleChange = this.handleChange.bind(this);\r\n\r\n\r\n    }\r\n    initialState = {\r\n        fullname:\"\",\r\n        email:\"\",\r\n        password:\"\",\r\n        password_confirmation:\"\",\r\n        registrationSuccess:false,\r\n        redirect: false,\r\n        goToRegistration: false,\r\n        errors:{}\r\n\r\n    }\r\n    resetUser=() => {\r\n    this.setState(() => this.initialState)\r\n    }\r\n    resetErrors=() => {\r\n        this.setState({errors: {}})\r\n    }\r\n    createNewUser = (newUser) => {\r\n        axios.post(\"/auth/register\", newUser)\r\n        .then(response => {\r\n\r\n            this.setState({goToRegistration: true});\r\n                \r\n        })\r\n        .catch(err => {\r\n            console.log(\"Top level error\", err.response);\r\n            if(err.response.data.confirmPassword) {\r\n                let errors = this.state.errors;\r\n                errors.confirmPassword = err.response.data.confirmPassword;\r\n                this.setState({errors : errors});\r\n            } else if(err.response.data.password) {\r\n                let errors = this.state.errors;\r\n                errors.password = err.response.data.password;\r\n                this.setState({errors : errors});\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Caught error\", err.response.data.message);\r\n                if(err.response.data.message === (this.state.email + \" already exists!\")) {\r\n                    //user exists, redirect to login dialog\r\n                    console.log(\"redirect to login\");\r\n\r\n                    this.setState({redirect: true});\r\n                    \r\n                \r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      if (nextProps.errors) {\r\n        this.setState({ errors: nextProps.errors });\r\n      }\r\n    }\r\n    handleSubmit(event) {\r\n        const image = this.state.image;\r\n        event.preventDefault();\r\n        console.log(image);\r\n        if(image === \"\") return;\r\n        try{\r\n            const user= {\r\n                id: null,\r\n                name: this.state.fullname,\r\n                username: this.state.email,\r\n                password: this.state.password,\r\n                confirmPassword: this.state.password_confirmation\r\n            };\r\n            this.resetErrors();\r\n            this.createNewUser(user);\r\n\r\n            //console.log(\"Form submitted?\");\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    redirectToLogin() {\r\n\r\n    }\r\n    userChange =event =>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const {fullname,\r\n            email,\r\n            password,\r\n            password_confirmation,\r\n            registrationSuccess,\r\n            redirect,\r\n            goToRegistration,\r\n            errors\r\n        } = this.state;\r\n\r\n        if(goToRegistration) {\r\n            this.state.goToRegistration = false;\r\n            return <Navigate to=\"/registration\" state = {{email: email}}/>\r\n        }\r\n        else if(redirect) {\r\n\r\n            this.state.redirect = false;\r\n            // console.log(email, \" already registerd\");\r\n            return <Navigate to=\"/\" state = {{email: email, displayLogin: true, show: true}}/>\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                \r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Form onReset={this.resetUser} onSubmit={this.handleSubmit} id=\"userFormId\">\r\n                    <Card.Body>\r\n                    <Form.Group as= {Col} controlId=\"formGridName\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control required autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    name=\"fullname\"\r\n                    value={fullname}\r\n                    onChange={this.userChange}\r\n                    className={\"bg-light\"}\r\n                    isInvalid={!!errors.fullname}\r\n                    placeholder=\"Enter Full Name\" />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.fullname}\r\n                    </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as= {Col} controlId=\"formGridemail\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control required autoComplete=\"off\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={this.userChange}\r\n                    isInvalid={!!errors.username}\r\n                    className={\"bg-light\"}\r\n                    placeholder=\"Enter Email (Username)\" />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.username}\r\n                    </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control required autoComplete=\"off\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={this.userChange}\r\n                    isInvalid={!!errors.password}\r\n                    className={\"bg-light\"}\r\n                    placeholder=\"Enter Password\" />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.password}\r\n                    </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control required autoComplete=\"off\"\r\n                    type=\"password\"\r\n                    name=\"password_confirmation\"\r\n                    value={password_confirmation}\r\n                    onChange={this.userChange}\r\n                    isInvalid={!!errors.confirmPassword}\r\n                    className={\"bg-light\"}\r\n                    placeholder=\"Re-enter Password\" />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.confirmPassword}\r\n                    </Form.Control.Feedback>    \r\n                    </Form.Group>\r\n\r\n                    <Card.Footer style={{\"textAlign\":\"center\"}}>\r\n                    <Container class=\"fluid\">\r\n                        <div class=\"row\">\r\n                            <div class=\"btn-group-sm btn-group-horizontal\">\r\n                            <Button size=\"sm\" variant=\"primary\" class=\"customWidth\" type=\"submit\">\r\n\r\n                            <FontAwesomeIcon icon={faSave} />Submit\r\n                            </Button>{\" \"}\r\n                            <Button size=\"sm\" variant=\"primary\" class=\"customWidth\" type=\"reset\">\r\n                            <FontAwesomeIcon icon={faUndo} />Reset\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Container>\r\n                    </Card.Footer>\r\n                    </Card.Body>\r\n                    </Form>\r\n                </Card>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//RegistrationForm.propTypes = {\r\n//  //createNewUser: PropTypes.func.isRequired,\r\n//  errors: PropTypes.object.isRequired\r\n//};\r\n\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\n","import React, { Component, useState } from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport LoginForm from '../auth/LoginForm'\r\nimport RegistrationForm from '../auth/RegistrationForm'\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport { Link } from 'react-router-dom';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {FaSignInAlt, FaPlusSquare } from \"react-icons/fa\";\r\nimport '../Styles/UserModal.scss';\r\n\r\nexport default class UserModal extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isLoggedIn = false;\r\n        this.displayLogin = true;\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n\r\n    handleClose() {\r\n        this.setState({});\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        auth.currentUser.subscribe(user => {\r\n            //no jwt in local storage, user not logged in\r\n            if(user && user.getCurrentUserValue !== null) {\r\n                this.isLoggedIn = true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let {username, show, displayLogin, onHide} = this.props;\r\n        const loginToggle = this.state;\r\n\r\n        return(\r\n        <Modal show={show} onHide={onHide}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>{displayLogin ?\r\n                        <div> <FaSignInAlt/> SignIn </div>\r\n                        : <div> <FaPlusSquare /> Register </div>}\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {displayLogin ? <LoginForm username={username}/> :\r\n                    <RegistrationForm/>}\r\n                </Modal.Body>\r\n\r\n        </Modal> );\r\n    }\r\n\r\n\r\n}","import React, {Component, useState} from 'react';\r\nimport {Dropdown, Navbar, NavbarBrand, Nav, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport {authenticationService} from '../services/authenticationService';\r\nimport {getNameService as getNameSvc} from '../services/getNameService';\r\nimport {getImageService as getImgSvc} from '../services/getImageService';\r\nimport UserModal from './UserModal';\r\nimport {Subject} from 'rxjs';\r\nimport Avatar from 'react-avatar'\r\nimport history from '../Components/history'\r\nimport '../Styles/App.scss';\r\n\r\nexport default class AppNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false,\r\n            displayLogin: true,\r\n            displayDropdown: false,\r\n            name: \"\",\r\n            avatar: \"\",\r\n            redirectToLogin: false,\r\n            redirectToPosts: false,\r\n            redirectToProfile: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.loginLinkName = \"Login\"\r\n\r\n        this.isDlgOpen = false;\r\n        this.logout = this.logout.bind(this);\r\n        this.onClickPostRedirect = this.onClickPostRedirect.bind(this);\r\n        this.onClickProfileRedirect = this.onClickProfileRedirect.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //console.log(authenticationService.loggedIn);\r\n        this.subscriptionLogOut = authenticationService.currentUser.subscribe(user => {\r\n            console.log(\"Logout?\", user);\r\n            if(user === null) this.setState({name:\"\", displayDropdown: false})\r\n        })\r\n        this.subscriptionProfileDropdown = getNameSvc.currentName.subscribe(name => {\r\n            console.log(\"checking profile dropdown name\", name);\r\n            //upon page refresh update the name field to the current user's name\r\n            if(name === \"undefined\" || !name) {\r\n                name = getNameSvc.currentNameValue;\r\n            }\r\n            if(name) {\r\n             console.log(\"currentName Observable Triggered\", name);\r\n\r\n             this.setState({name: name, displayDropdown: true});\r\n            }\r\n\r\n\r\n        })\r\n\r\n        this.subscriptionImageSet = getImgSvc.currentImage.subscribe(image => {\r\n            if(authenticationService.loggedIn === true)\r\n            {\r\n\r\n                if(image === \"undefined\" || !image) {\r\n\r\n                image = getImgSvc.currentImageValue;\r\n                //console.log(\"Image observable subscription triggered\", image);\r\n                }\r\n                this.setState({avatar: image})\r\n            }\r\n\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.subscriptionProfileDropdown.unsubscribe();\r\n        this.subscriptionImageSet.unsubscribe();\r\n        this.subscriptionLogOut.unsubscribe();\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        authenticationService.logout();\r\n        this.setState({redirectToLogin: true});\r\n    }\r\n\r\n    onClickPostRedirect() {\r\n        this.setState({redirectToPosts: true})\r\n    }\r\n\r\n    onClickProfileRedirect() {\r\n        this.setState({redirectToProfile: true})\r\n    }\r\n    render() {\r\n        const NavbarBrandStyle = {\r\n            fontSize: \"50px\",\r\n            fontFamily: \"Arial\"\r\n        }\r\n        const name = this.state.name;\r\n        const avatar = this.state.avatar;\r\n\r\n        if(this.state.redirectToLogin) {\r\n            this.state.redirectToLogin = false;\r\n            history.push(\"/\");\r\n            //return <Navigate to=\"/\"/>\r\n        }\r\n        if(this.state.redirectToPosts) {\r\n            this.state.redirectToPosts = false;\r\n            history.push(\"/posts\");\r\n        }\r\n        if(this.state.redirectToProfile) {\r\n            this.state.redirectToProfile = false;\r\n            history.push(\"/profile\");\r\n        }\r\n        return (\r\n\r\n            <Navbar color=\"light\" expand=\"md\" class=\"px-2\">\r\n\r\n                <NavbarBrand style={NavbarBrandStyle}>\r\n                    <Link to='/' style={{textDecoration: \"none\"}}>ReactBlog</Link>\r\n                </NavbarBrand>\r\n            \r\n\r\n            {name ? (\r\n                <Nav className=\"ms-auto\" style={{marginRight: \"20px\"}}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col style={{marginRight: \"10px\"}}  >\r\n                                {avatar ? (\r\n\r\n                                        <Avatar round ={true}\r\n                                            size=\"40\"\r\n                                            name={name}\r\n                                            src={avatar}/>\r\n                                        ): (\r\n                                        name ? (\r\n                                            <Avatar size=\"40\"\r\n                                                round={true}\r\n                                                name={name}/>\r\n                                            ) : <div/>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col>\r\n                                {this.state.displayDropdown ? (\r\n                                    <Dropdown class=\"px-20\">\r\n\r\n                                        <Dropdown.Toggle variant=\"success\"> Welcome, {name} </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                           \r\n                                            <Dropdown.Item onClick={this.onClickPostRedirect}>\r\n                                                View Posts\r\n                                            </Dropdown.Item>\r\n                                            \r\n                                       \r\n                                            <Dropdown.Item onClick={this.onClickProfileRedirect}>\r\n                                                View/Edit Profile\r\n                                            </Dropdown.Item>\r\n                                        \r\n                                            <Dropdown.Item>Contact Us</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={this.logout}>Logout</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown> )\r\n                                    : <div/>\r\n\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Nav>\r\n                ) : ( <div/> )\r\n            }\r\n        </Navbar>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, {useState, Component} from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport {Button, Container, Row, Col} from 'react-bootstrap';\r\nimport '../Styles/UserModal.scss';\r\nimport UserModal from './UserModal';\r\n\r\nexport default class Landing extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: false, displayLogin: false, height: 0, width: 0, redirectLogicActive: true};\r\n        this.openLoginDlg = this.openLoginDlg.bind(this);\r\n        this.openRegisterDlg = this.openRegisterDlg.bind(this);\r\n        this.onCloseDlg = this.onCloseDlg.bind(this);\r\n\r\n\r\n        \r\n        //window.addEventListener(\"resize\", this.update);\r\n    }\r\n\r\n    update = () => {\r\n        console.log(\"Login Button position within window\", ReactDOM\r\n            .findDOMNode(this.refs['button'])\r\n            .getBoundingClientRect());\r\n        this.setState({height: window.innerHeight, width: window.innerWidth})\r\n    }\r\n    openLoginDlg(){\r\n        this.setState({show: true, displayLogin: true});\r\n    }\r\n\r\n    openRegisterDlg(){\r\n        this.setState({show: true, displayLogin: false});\r\n    }\r\n\r\n    onCloseDlg =() => {\r\n        this.props.resetHomePageProps();        \r\n        this.setState({show:false, redirectLogicActive: true})\r\n    }\r\n    \r\n    render() {\r\n        let {show, displayLogin, height, width, redirectLogicActive} = this.state;\r\n        \r\n        //if redirected from registration pop-up, display login pop-up\r\n        console.log(\"Properties\", this.props, redirectLogicActive);\r\n        let email = null;\r\n        if(redirectLogicActive && this.props.show) {\r\n            console.log(\"redirecting to login\");\r\n            email = this.props.email;\r\n            show = this.props.show;\r\n            displayLogin = this.props.displayLogin;\r\n            this.state.redirectLogicActive = false;\r\n        }\r\n        \r\n        console.log(\"Landing Component\", email, show, displayLogin);\r\n        //console.log(\"Window Dimensions:\", width, \"X\", height);\r\n        return(\r\n\r\n            <div ref=\"root\">\r\n\r\n                <UserModal username= {email} show={show} displayLogin={displayLogin} onHide={this.onCloseDlg}/>\r\n                <Col style={{marginLeft: \"auto\",\r\n                    marginRight: \"auto\"\r\n                    }}>\r\n                    <Container>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                        <Button ref=\"button\" className={\"btn-primary\"}\r\n                            onClick={this.openLoginDlg}>\r\n                            Login\r\n                        </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <Button className={\"link-style btn-secondary\"}\r\n                            style={{outline: \"none\"}}\r\n                            onClick={this.openRegisterDlg}>\r\n                            Don't have an account? Register Here..\r\n                        </Button>\r\n                        </Col>\r\n                     </Row>\r\n                     </Container>\r\n                </Col>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/alpinelake_bg.d1f3d6dc.jpg\";","export default __webpack_public_path__ + \"static/media/book_background.9e5f4bae.jpg\";","import React, { Component, useState, useEffect, useCallback } from 'react';\r\nimport {useLocation, Navigate} from 'react-router-dom';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport Landing from '../Components/Landing';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Row, Col, Carousel, CarouselControl, CarouselItem } from 'react-bootstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {guest} from '../Roles/Guest';\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport loginBackground from './../images/alpinelake_bg.jpg';\r\nimport blogBackground from './../images/book_background.jpg';\r\nconst Home = () => {\r\n\r\n        let location = useLocation();\r\n        const [index, setIndex] = useState(0);\r\n        const [nav, setNav] = useState(\"/\");\r\n        const handleSelect = (selectedIndex, e) => {\r\n            setIndex(selectedIndex);\r\n        }\r\n\r\n        \r\n        \r\n        const [forceRender, setForceRender] = useState(0);\r\n        console.log(\"location\", location);\r\n\r\n        const replaceLocation = useCallback(() => {\r\n            if(location.state) location.state = null;\r\n          }, [location]);\r\n\r\n\r\n        function ResetHomePageProps() {\r\n            console.log(\"Parent location state:\", location.state)\r\n            if(location.state) {\r\n                location.state = \"undefined\";\r\n                setForceRender(forceRender => forceRender + 1);\r\n            }\r\n        }\r\n\r\n        function navToPosts() {\r\n\r\n            setNav(\"/posts\")\r\n        }\r\n   \r\n        if(nav === \"/posts\") {\r\n            \r\n            return <Navigate to=\"/posts\"/>\r\n        }\r\n        else {\r\n            return (\r\n                \r\n                <div>\r\n                \r\n                    <Carousel\r\n                        activeIndex = {index}\r\n                        onSelect = {handleSelect}\r\n                    >\r\n                        <Carousel.Item>\r\n                            <div className={\"p5 mb-4 rounded-3\"}\r\n                            style={{ backgroundImage: `url(${loginBackground})`,\r\n                            backgroundSize: 'cover' }}>\r\n                            <Container style={{maxWidth: \"100vw\",\r\n                            maxHeight: \"40vw\",\r\n                            height: \"40vw\"\r\n                            }}>\r\n\r\n                                <Row className=\"text-center justify-content-center d-flex\">\r\n                                    <h1 className={\"display-5\"}>Landing Page</h1>\r\n\r\n                                </Row>\r\n\r\n\r\n                                <Row className=\"text-center justify-content-center d-flex\">\r\n                                \r\n                                {(location.state !== \"undefined\" && location.state != null) ?\r\n                                    <div>\r\n                                        <Landing \r\n                                            email={location.state.email}\r\n                                            show={location.state.show} \r\n                                            displayLogin={location.state.displayLogin}\r\n                                            resetHomePageProps = {ResetHomePageProps}/>\r\n                                    </div>\r\n                                    : <Landing email={null}\r\n                                        show={false}\r\n                                        displayLogin={false}\r\n                                        resetHomePageProps = {ResetHomePageProps}/>\r\n                                }\r\n\r\n                                </Row>\r\n\r\n                            </Container>\r\n                            </div>\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                            <div className={\"p5 mb-4 rounded-3\"}\r\n                            style={{ backgroundImage: `url(${blogBackground})`,\r\n                            backgroundSize: 'cover' }}>\r\n                            <Container style={{maxWidth: \"100vw\",\r\n                            maxHeight: \"40vw\",\r\n                            height: \"40vw\"\r\n                            }}>\r\n\r\n                                <Row className=\"text-center justify-content-center d-flex\">\r\n                                    <h1 className={\"display-5\"} style={{color: \"white\"}}>\r\n                                        Explore our site!\r\n                                    </h1>\r\n\r\n                                </Row>\r\n\r\n\r\n                                <Row>\r\n                                    <Container className=\"justify-content-center\"\r\n                                    style = {{maxWidth: \"25vw\"}}>\r\n                                    <Col >\r\n                                        <Row>\r\n                                            <Button type=\"primary\" size=\"sm\" onClick={navToPosts}>\r\n                                            View Posts\r\n                                            </Button>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    </Container>\r\n\r\n                                </Row>\r\n\r\n                            </Container>\r\n                            </div>  \r\n                        </Carousel.Item>\r\n                    \r\n                    </Carousel>\r\n                </div>\r\n            );\r\n\r\n        }\r\n}\r\nexport default Home;","import {authenticationService as auth} from '../services/authenticationService'\r\n\r\nexport function authHeader() {\r\n    // return authorization header with jwt token\r\n    const currentUser = auth.currentUserValue;\r\n    console.log(\"authHeader\", currentUser.token);\r\n    if (currentUser && currentUser.token) {\r\n            return `Bearer ${currentUser.token}`;\r\n    } else {\r\n        return {};\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Navigate, Link } from 'react-router-dom';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {ContentState, convertFromRaw} from 'draft-js';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\nimport renderHTML from 'react-render-html';\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\nclass PostList extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {posts: []};\r\n        this.remove = this.remove.bind(this);\r\n\r\n    }\r\n\r\n\r\n    async remove(id) {\r\n//        console.log(id)\r\n        await axios.delete(`/api/posts/${id}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n        }).then((response) => {\r\n           this.props.updatePosts();\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const {isLoading} = this.state;\r\n        const posts = this.props.posts;\r\n        console.log(\"Posts\", posts);\r\n        const role = this.props.role;\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n\r\n\r\n        const postList = posts.map(post => {\r\n                    var body = stateToHTML(convertFromRaw(\r\n                            JSON.parse(post.body)));\r\n                    var options = { month: 'long'};\r\n\r\n                    var d = new Date( post.modifiedAt * 1000);\r\n                    var month = d.toLocaleDateString(\"en-US\", options);\r\n\r\n                    var date = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n                    return(\r\n                    <div>\r\n                    <article class=\"blog-post\">\r\n                        {role === \"ROLE_ADMIN\" ?\r\n                            <ButtonGroup>\r\n                                 <Link style={{textColor: \"white\"}}\r\n                                    to={{pathname: `/posts/edit/${post.id}`}}>\r\n                                        <Button size=\"sm\" color=\"primary\">Edit</Button>\r\n                                    </Link>\r\n\r\n                                <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(post.id)}>Delete</Button>\r\n                            </ButtonGroup> :\r\n                            <div/>\r\n                        }\r\n                        <h2 class=\"blog-post-title\">\r\n                            <Link to={{\r\n                                pathname: `/posts/view/${post.id}`\r\n                                }}>\r\n                                {post.title}\r\n                            </Link>\r\n                        </h2>\r\n                        <p class=\"blog-post-meta\">{post.author}</p>\r\n                        <p class=\"blog-post-meta\">{date}</p>\r\n                        <p>{renderHTML(body)}</p>\r\n                    </article>\r\n                    </div>\r\n                    );\r\n        });\r\n        console.log(postList);\r\n        return (\r\n            <div>\r\n            {postList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostList;","\r\nexport const Pagination = {\r\n    currentPage: 1,\r\n    itemsPerPage: 3,\r\n    itemCount: 0,\r\n    totalPages: 1,\r\n    getCurrentStartIndex,\r\n    getCurrentEndIndex,\r\n    goToNextPage,\r\n    goToPrevPage,\r\n    setItemCount,\r\n    setTotalPages\r\n\r\n}\r\nfunction setItemCount(itemCount) {\r\n    Pagination.itemCount = itemCount;\r\n}\r\nfunction setTotalPages() {\r\n    if(Pagination.itemCount === 0) Pagination.totalPages = 1;\r\n    else Pagination.totalPages = Math.ceil(Pagination.itemCount/ Pagination.itemsPerPage);\r\n}\r\nfunction getCurrentStartIndex() {\r\n    return Pagination.itemsPerPage * (Pagination.currentPage - 1)\r\n}\r\n\r\nfunction getCurrentEndIndex() {\r\n    return (Pagination.itemsPerPage * Pagination.currentPage) - 1\r\n}\r\n\r\nfunction goToNextPage() {\r\n    if(Pagination.currentPage < Pagination.totalPages) Pagination.currentPage++;\r\n}\r\n\r\nfunction goToPrevPage() {\r\n    if(Pagination.currentPage > 1) Pagination.currentPage--;\r\n}","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getNameService as getNameSvc} from '../services/getNameService'\r\nimport axios from 'axios';\r\nimport PostList from \"../Components/PostList\"\r\nimport Cookies from 'universal-cookie';\r\nimport {Pagination} from \"../helpers/Pagination\";\r\nimport {authHeader} from \"../helpers/auth-header\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowRight, faArrowLeft} from \"@fortawesome/free-solid-svg-icons\"\r\nclass Posts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {role: \"ROLE_GUEST\", posts: [], currentPage: [], redirectToPostView: false};\r\n        this.subscriptionRole = null;\r\n        this.goToNextPage = this.goToNextPage.bind(this);\r\n        this.goToPrevPage = this.goToPrevPage.bind(this);\r\n        this.updatePagination  = this.updatePagination.bind(this);\r\n        this.redirect = this.redirect.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.subscriptionRole = getNameSvc.currentRole.subscribe(role => {\r\n            if(role) {\r\n                console.log(\"Getting observable role\", role);\r\n                this.setState({role: role});\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const promise = auth.verifyLogin();\r\n        console.log(\"Posts componentDidMount\", promise);\r\n        if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) {\r\n                    console.log(\"Posts componentDidMount re-render\");\r\n                    this.setState({role: getNameSvc.currentRoleValue});\r\n                }\r\n            })\r\n        }\r\n        axios.get('api/posts').then(\r\n            res => {\r\n                console.log(res.data);\r\n\r\n                //response.json();\r\n                const posts = res.data;\r\n                this.state.posts = posts;\r\n\r\n        }).then(\r\n            res => {\r\n            this.state.posts = this.state.posts.sort(function(a,b) {\r\n                return a.modifiedAt < b.modifiedAt ? 1 : -1;\r\n            });\r\n            Pagination.setItemCount(this.state.posts.length);\r\n            Pagination.setTotalPages();\r\n\r\n            console.log(Pagination.totalPages);\r\n\r\n            this.setState({currentPage: this.getCurrentPage()});\r\n        });\r\n    }\r\n\r\n    updatePagination() {\r\n        let posts = [];\r\n        axios.get('api/posts', {\r\n            headers: {\r\n                'Authorization': authHeader()\r\n           }\r\n        }).then(\r\n            res => {\r\n                console.log(res.data);\r\n\r\n                //response.json();\r\n                posts = res.data;\r\n\r\n        }).then(() => {\r\n            Pagination.setItemCount(posts.length);\r\n            Pagination.setTotalPages();\r\n            Pagination.currentPage = 1;\r\n            this.setState({posts: posts, currentPage: this.getCurrentPage()})\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        this.subscriptionRole.unsubscribe();\r\n    }\r\n\r\n    goToNextPage() {\r\n        Pagination.goToNextPage();\r\n        this.setState({currentPage: this.getCurrentPage()});\r\n    }\r\n\r\n    goToPrevPage() {\r\n        Pagination.goToPrevPage();\r\n        this.setState({currentPage: this.getCurrentPage()});\r\n    }\r\n\r\n    getCurrentPage() {\r\n            console.log(\"CurrentPage\", Pagination.currentPage);\r\n        return this.state.posts.slice(Pagination.getCurrentStartIndex(),\r\n                Pagination.getCurrentEndIndex() + 1);\r\n    }\r\n\r\n    isLastPage() {\r\n        if(Pagination.currentPage === Pagination.totalPages) return true;\r\n        else return false;\r\n    }\r\n\r\n    isFirstPage() {\r\n        if(Pagination.currentPage === 1) return true;\r\n        else return false;\r\n    }\r\n    redirect() {\r\n        this.setState({redirectToPostView: true})\r\n    }\r\n    render() {\r\n        const currRole = this.state.role.roleName;\r\n        const currentPage = this.state.currentPage;\r\n        const prevButtonDisabled = this.isFirstPage();\r\n        const nextButtonDisabled = this.isLastPage();\r\n//        console.log(currRole);\r\n        console.log(\"CurrentPage\", currentPage);\r\n        var id = \"new\"\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row>\r\n                        {(currRole === \"ROLE_ADMIN\" || currRole === \"ROLE_USER\") ?\r\n                            <div className=\"float-right\">\r\n                                <Link to={{pathname:`/posts/edit/${id}`}}>\r\n                                <Button color=\"primary\">\r\n                                    Add Post                              \r\n                                </Button>\r\n                                </Link>\r\n                            </div>\r\n                            :\r\n                            <div/>\r\n                        }\r\n                        <h3>Posts</h3>\r\n                        <div className=\"col-md-8\">\r\n                            <PostList updatePosts={this.updatePagination} posts={currentPage} role={currRole}/>\r\n                        </div>\r\n                    </Row>\r\n                    {Pagination.totalPages !== 1 ?\r\n                        <Row>\r\n                            <Col>\r\n                                <Button color=\"primary\" disabled={prevButtonDisabled} onClick={this.goToPrevPage}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button color=\"primary\" disabled={nextButtonDisabled} onClick={this.goToNextPage}>\r\n                                    <FontAwesomeIcon icon={faArrowRight}/>\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    : <div/>}\r\n                </Container>\r\n            </div>\r\n        );\r\n  \r\n    }\r\n}\r\nexport default Posts;","import React, {Component, useState} from 'react';\r\nimport {Editor, EditorState, ContentState, RichUtils} from 'draft-js';\r\nexport default class RichTextEditor extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.setDomEditorRef = ref => this.domEditor = ref;\r\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n      if(this.props.editorState && this.props.onChange) this.domEditor.focus()\r\n    }\r\n\r\n    handleKeyCommand(command, editorState) {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n          this.props.onChange(newState);\r\n          return 'handled';\r\n        }\r\n\r\n        return 'not-handled';\r\n    }\r\n    render() {\r\n        const {editorState, onChange} = this.props;\r\n        //console.log(onChange);\r\n        return (\r\n\r\n            <div\r\n              style={{ borderRadius: \"5px\", border: \"1px solid lightgrey\", minHeight: \"6em\", cursor: \"text\" }}\r\n            >\r\n              <Editor\r\n                ref={this.setDomEditorRef}\r\n                editorState={editorState}\r\n                handleKeyCommand={this.handleKeyCommand}\r\n                onChange={onChange}\r\n              />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {useState, Component} from 'react';\r\nimport axios from 'axios';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {Button, Container, Row, Col, Form, FormGroup, Input, Label} from 'reactstrap'\r\nimport {Link} from 'react-router-dom';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getImageService as getImageSvc} from '../services/getImageService'\r\nimport { EditorState, ContentState, convertFromRaw, convertToRaw} from 'draft-js'\r\nimport RichTextEditor from '../Components/RichTextEditor'\r\nimport CustomAvatarEditor from '../Components/CustomAvatarEditor'\r\nimport Avatar from 'react-avatar'\r\nimport history from '../Components/history'\r\nimport \"../Styles/Profile.scss\"\r\nimport CryptoJS from \"crypto-js\"\r\nclass ProfileEdit extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.profile = {\r\n            username: \"\",\r\n            name: \"\",\r\n            heading: \"\",\r\n            body: \"\",\r\n            imageUrl: \"\"\r\n        }\r\n        this.state = {\r\n            id: \"\",\r\n            profile: this.profile,\r\n            image: \"\",\r\n            editorState: EditorState.createEmpty(),\r\n            showModal: false,\r\n            postImage: false,\r\n            updateEditor: false,\r\n            contentLoaded: false\r\n        }\r\n        this.initialFormState = {\r\n            name: \"\",\r\n            heading: \"\",\r\n            body: \"\",\r\n            imageUrl: \"\"\r\n        }\r\n        this.username = auth.getUsernameFromJWT();\r\n        this.submitDisabled = true;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.displayAvatarEditor = this.displayAvatarEditor.bind(this);\r\n        this.closeAvatarEditor = this.closeAvatarEditor.bind(this);\r\n        this.imageSaved = this.imageSaved.bind(this);\r\n        this.postImagetoImgBB = this.postImageToImgBB.bind(this);\r\n        this.getBase64Image = this.getBase64Image.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const promise = auth.verifyLogin();\r\n\r\n        if(promise) {\r\n            this.submitDisabled = true;\r\n            promise.then(result => {\r\n                if(localStorage.getItem('currentUser')) {\r\n\r\n\r\n                    const {id, profile, image, editorState, showModal, postImage} = this.state;\r\n                    const imgUrl = this.state.image\r\n                    console.log(\"submitting profile info\", this.state);\r\n                    if(imgUrl && postImage)\r\n                    {\r\n                        //console.log(\"ImgBB Post URL\", imgUrl);\r\n\r\n                        var updatedClient = {\r\n                            id: id,\r\n                            name: this.profile.name,\r\n                            profileHeading: this.profile.heading,\r\n                            profileInfo: null,\r\n                            avatar: {username: this.profile.username, strBase64File: imgUrl},\r\n                        }\r\n\r\n                        updatedClient.profileInfo =\r\n                            JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n                            //console.log(\"profile handleSubmit\", updatedClient);\r\n                            const requestBody = JSON.stringify(updatedClient)\r\n                            axios.put(`/api/clients/${updatedClient.id}`, requestBody, {\r\n\r\n                                headers: {\r\n                                    'Accept': 'application/json',\r\n                                    'Content-Type': 'application/json',\r\n                                    'Authorization': authHeader()\r\n                                }\r\n                            }).then(response => {\r\n                                getImageSvc.setImage(this.state.image);\r\n                                history.push('/posts');\r\n                            }).catch(err => console.log(err));\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        var updatedClient = {\r\n                            id: id,\r\n                            name: this.profile.name,\r\n                            profileHeading: this.profile.heading,\r\n                            profileInfo: null,\r\n                            avatar: null\r\n\r\n                        }\r\n                        updatedClient.profileInfo =\r\n                            JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n                        //console.log(\"profile handleSubmit\", updatedClient);\r\n                        const requestBody = JSON.stringify(updatedClient)\r\n                        axios.put(`/api/clients/${updatedClient.id}`, requestBody, {\r\n\r\n                            headers: {\r\n                                'Accept': 'application/json',\r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': authHeader()\r\n                            }\r\n                        }).then(response => {\r\n                            history.push('/posts');\r\n                        }).catch(err => console.log(err));\r\n                    }\r\n\r\n                }\r\n            })\r\n            this.setState({});\r\n        }\r\n\r\n    }\r\n    onChangeRichTextEditor = (newEditorState) =>{\r\n      this.setState({editorState: newEditorState});\r\n\r\n    }\r\n\r\n    async getClient() {\r\n        let client = \"\";\r\n\r\n        await axios.get(`/api/clients/getByUsername/${this.username}`, {\r\n            headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': authHeader()\r\n            }\r\n        }).then(response => {\r\n            //.log(\"ProfileEdit\", response.data);\r\n            client = response.data;\r\n        }).catch(err => {\r\n            console.log(\"ProfileEdit Error\", err);\r\n        })\r\n        this.initialFormState = {\r\n            name: client.name,\r\n            heading: client.profileHeading,\r\n            body: client.profileInfo\r\n        }\r\n        this.profile = {\r\n            username: client.username,\r\n            name: client.name,\r\n            heading: client.profileHeading,\r\n            body: client.profileInfo,\r\n        }\r\n        if(getImageSvc.currentImageValue === \"\") {\r\n            if(client.avatar) this.profile.imageUrl = client.avatar.strBase64File;\r\n            else this.profile.imageUrl = \"\";\r\n        }\r\n        else this.profile.imageUrl = getImageSvc.currentImageValue;\r\n\r\n        var editorState = this.state.editorState;\r\n        if(this.profile.body) {\r\n            //console.log(\"Profile\", this.profile);\r\n            editorState =\r\n                EditorState.createWithContent(convertFromRaw(\r\n                    JSON.parse(this.profile.body)\r\n                ));\r\n        }\r\n\r\n\r\n        this.setState({\r\n            id: client.id,\r\n            profile: this.profile,\r\n            editorState: editorState,\r\n            image: this.profile.imageUrl,\r\n            contentLoaded: true})\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(localStorage.getItem('currentUser')) {\r\n            this.getClient();\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n\r\n        const target = event.target;\r\n        //console.log(\"Target\", target);\r\n        const value = target.value;\r\n\r\n        const name = target.name;\r\n\r\n        let profile = this.profile;\r\n        profile[name] = value\r\n\r\n        this.setState({profile});\r\n    }\r\n\r\n    checkFormState() {\r\n        let name = \"\";\r\n        let heading = \"\";\r\n        let body = \"\";\r\n        let imageUrl = \"\";\r\n        let originalName = \"\";\r\n        let originalHeading = \"\";\r\n        let originalBody = \"\";\r\n        let originalUrl = \"\";\r\n        if(this.state.profile.name) {\r\n            name = this.state.profile.name;\r\n        }\r\n        if(this.state.profile.heading) {\r\n            heading = this.state.profile.heading;\r\n        }\r\n        if(this.state.profile.body)\r\n        {\r\n            body = JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n        }\r\n        if(this.state.profile.imageUrl)\r\n        {\r\n            imageUrl = this.state.profile.imageUrl;\r\n        }\r\n        if(this.initialFormState.name) {\r\n            originalName = this.initialFormState.name;\r\n        }\r\n        if(this.initialFormState.heading) {\r\n            originalHeading = this.initialFormState.heading;\r\n        }\r\n        if(this.initialFormState.body) {\r\n            originalBody = this.initialFormState.body;\r\n        }\r\n        if(this.initialFormState.imageUrl) {\r\n            originalUrl = this.initialFormState.imageUrl;\r\n        }\r\n\r\n        if(this.state.postImage) return false;\r\n        if(name === originalName\r\n            && heading === originalHeading\r\n            && body === originalBody)\r\n        {\r\n            //console.log(\"keep button disabled\")\r\n            return true;\r\n        }\r\n\r\n        else\r\n        {\r\n            //console.log(\"enable button\")\r\n            return false;\r\n        }\r\n    }\r\n\r\n    displayAvatarEditor() {\r\n        this.setState({showModal: true});\r\n    }\r\n\r\n    closeAvatarEditor() {\r\n\r\n        this.setState({showModal: false});\r\n\r\n    }\r\n\r\n    setImage = (avatarEditorImage) => {\r\n         this.setState({image: avatarEditorImage})\r\n\r\n    }\r\n\r\n    imageSaved = (avatarEditorImage) => {\r\n        this.setState({image: avatarEditorImage, postImage: true});\r\n    }\r\n\r\n\r\n    async postImageToImgBB(avatarEditorImage) {\r\n        const API_KEY = \"cfb81278dab11ed393283f39d4119f59\";\r\n        const API_URL = \"https://api.imgbb.com/1/upload\";\r\n        let image =\r\n            avatarEditorImage.replace(/^data:image\\/(png|jpg|jpeg|gif);base64,/, \"\")\r\n\r\n        var form = new FormData();\r\n        form.append('image', image)\r\n        await axios.post(API_URL, form, {\r\n            params: {\r\n                key: API_KEY\r\n                },\r\n    //\r\n    //           headers: {\r\n    //                'Accept': 'application/json',\r\n    //                'Access-Control-Allow-Origin': '*',\r\n    //                'Connection': 'keep-alive',\r\n    //                'Content-Type': 'application/json',\r\n    //            },\r\n\r\n            }).then(response => {\r\n                let res = response.data.data.url;\r\n                const profile = this.state.profile;\r\n                //console.log(\"Post to ImgBB Response\", res);\r\n                profile.imageUrl = res;\r\n                this.setState({profile: profile});\r\n            }).catch(err => console.log(err));\r\n\r\n        //console.log(\"Posting the following image\", image.substring(0,20));\r\n\r\n\r\n    }\r\n\r\n    async getBase64Image(id) {\r\n        await axios.get(`/api/clients/getById/${id}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n\r\n        }).then(response => {\r\n\r\n            return response.data.iconUrl;\r\n        });\r\n\r\n        // now do something with `dataUrl`\r\n\r\n    }\r\n\r\n    render() {\r\n        const {id, profile, image, editorState, showModal, postImage, contentLoaded} = this.state;\r\n//        if(id === null && localStorage.getItem(\"currentUser\")) {\r\n//            console.log(\"GETting client with new jwt\");\r\n//            this.getClient();\r\n//            return;\r\n//        }\r\n\r\n        console.log(\"ProfileEdit Render\", this.state);\r\n        this.submitDisabled = this.checkFormState();\r\n        //console.log(\"render\", this.state);\r\n\r\n\r\n        return(\r\n\r\n                <div>\r\n                {contentLoaded ?\r\n                    (\r\n                    <div>\r\n                        <CustomAvatarEditor\r\n                            image={image}\r\n                            showModal={showModal}\r\n                            modalClose={this.closeAvatarEditor}\r\n                            setImage={this.setImage}\r\n                            imageSaved={this.imageSaved}\r\n                        />\r\n                        <Container>\r\n                            <h1>Edit Profile</h1>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"name\"><strong>Name</strong></Label>\r\n                                    <Input style={{maxWidth: \"250px\"}}\r\n                                        type=\"text\" name=\"name\" id=\"name\" value={profile.name}\r\n                                           onChange={this.handleChange} autoComplete=\"name\"/>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"heading\"><strong>Heading</strong></Label>\r\n                                    <Input type=\"text\" name=\"heading\" id=\"heading\" value={profile.heading}\r\n                                           onChange={this.handleChange} autoComplete=\"heading\"/>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"body\"><strong>Profile Info</strong></Label>\r\n\r\n                                        <RichTextEditor\r\n                                            editorState={this.state.editorState}\r\n                                            onChange={this.onChangeRichTextEditor}/>\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Container>\r\n                                        <Row>\r\n                                            <Label for=\"Icon\"><strong>Profile Icon</strong></Label>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            {image ?\r\n                                                <Avatar round ={true}\r\n                                                    borderRadius=\"50\"\r\n                                                    size=\"100\"\r\n                                                    name={image}\r\n                                                    src={image}/>\r\n                                                :\r\n                                                <Avatar size=\"100\"\r\n                                                    round={true}\r\n                                                    name={profile.name}/>\r\n                                             }\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Button style={{marginTop: \"10px\", maxWidth: \"200px\"}}\r\n                                                color=\"primary\"\r\n                                                onClick={this.displayAvatarEditor}>\r\n                                                Choose Icon\r\n                                            </Button>\r\n\r\n                                         </Row>\r\n\r\n                                    </Container>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button disabled={this.submitDisabled} color=\"primary\" type=\"submit\">Update Profile</Button>{' '}\r\n                                    <Button color=\"secondary\" tag={Link} to=\"/posts\">Cancel</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Container>\r\n                    </div>  ) : <div/>  }\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ProfileEdit;","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport ProfileEdit from '../Components/ProfileEdit';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {guest} from '../Roles/Guest';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nasync function getLogin() {\r\n    return await auth.verifyLogin();\r\n}\r\nconst Profile = () => {\r\n        const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n        const promise = getLogin();\r\n        if(promise === \"DONE\") {\r\n            setIsLoading(false);\r\n        }\r\n        else if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                console.log(\"Promise resolved?\", resolved);\r\n                if(localStorage.getItem('currentUser')) setIsLoading(false);\r\n            });\r\n        }\r\n\r\n        if(!isLoading)\r\n        {\r\n            return (\r\n                <div>\r\n\r\n                <Container style={{position: \"relative\",\r\n                    maxWidth: \"100vw\",\r\n                    maxHeight: \"40vw\",\r\n                    height: \"40vw\"}}>\r\n\r\n                       <ProfileEdit/>\r\n\r\n                </Container>\r\n                </div>\r\n            );\r\n        }\r\n        else return (<div/>);\r\n}\r\nexport default Profile;","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\nimport {Card} from \"react-bootstrap\";\r\nimport history from '../Components/history';\r\nimport { Navigate, useLocation} from 'react-router-dom';\r\n\r\nconst RegistrationSuccess = () => {\r\n\r\n\r\n\r\n    const location = useLocation();\r\n    console.log(location);\r\n    const [redirect, setRedirect] = useState(false);\r\n    function openDlg() {\r\n        setRedirect(true);\r\n    }\r\n\r\n    if(redirect) {\r\n\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n\r\n            <Container>\r\n            <div class = \"row\">\r\n                <div class = \"col text-center\">\r\n                    Sign-up successful, please check email sent to <b>{location.state.email}</b> to finish registration process..\r\n                </div>\r\n            </div>\r\n            <div class = \"row\">\r\n                <div class = \"col text-center\">\r\n                    <Button className={\"btn-primary center\"} onClick={openDlg}> Proceed </Button>\r\n                </div>\r\n            </div>\r\n            </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nexport default RegistrationSuccess;","import {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nexport function withRouter( Child ) {\r\n  return ( props ) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    return <Child { ...props } params={params} navigate={ navigate } location={ location } />;\r\n  }\r\n}","import React, { Component, useState } from 'react';\r\nimport { useLocation, Link, Navigate} from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { EditorState, ContentState, convertFromRaw, convertToRaw} from 'draft-js'\r\nimport RichTextEditor from '../Components/RichTextEditor'\r\nimport AppNavbar from './AppNavbar';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {authenticationService as auth} from '../services/authenticationService';\r\nimport {getNameService as getNameSvc} from '../services/getNameService';\r\nimport {withRouter} from '../Routes/withRouter';\r\nimport axios from 'axios';\r\n\r\nlet location\r\n\r\n// const UseLocation = () => {\r\n//   location = useLocation()\r\n//   return null\r\n// }\r\n\r\nclass PostEdit extends Component {\r\n\r\n    emptyItem = {\r\n        title: '',\r\n        body: '',\r\n        author: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post_id: \"\",\r\n            value: \"\",\r\n            item: this.emptyItem,\r\n            editorState: EditorState.createEmpty(),\r\n            redirectToPosts: false\r\n        };\r\n        this.state.item.author = getNameSvc.currentNameValue;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        //this.onChangeRichTextEditor = this.onChangeRichTextEditor(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n    //    console.log(this.props.match.params.id)\r\n//        console.log(this.item);\r\n        var post;\r\n        // console.log(\"Location\", location);\r\n        // console.log(\"Prestate\", this.state\r\n        console.log(\"Props\", this.props);\r\n        this.state.post_id = this.props.params.id;\r\n        const promise = auth.verifyLogin();\r\n        if(promise === \"DONE\") {\r\n           if (this.state.post_id !== 'new') {\r\n               await axios.get(`/api/posts/${this.state.post_id}`,\r\n                   {\r\n                       headers: {\r\n                           'Accept': 'application/json',\r\n                           'Content-Type': 'application/json',\r\n                           'Authorization': authHeader()\r\n                               }\r\n                   }\r\n               ).then(response => {\r\n                   post = response.data;\r\n\r\n                   this.setState({item: post,\r\n                       editorState: EditorState.createWithContent(ContentState.createFromText(post.body))\r\n                   });\r\n               });\r\n\r\n           }\r\n        }\r\n        else if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) {\r\n                    if (this.state.post_id !== 'new') {\r\n                        axios.get(`/api/posts/${this.state.post_id}`,\r\n                            {\r\n                                headers: {\r\n                                    'Accept': 'application/json',\r\n                                    'Content-Type': 'application/json',\r\n                                    'Authorization': authHeader()\r\n                                        }\r\n                            }\r\n                        ).then(response => {\r\n                            post = response.data;\r\n\r\n                            const editorState =\r\n                                    EditorState.createWithContent(convertFromRaw(\r\n                                    JSON.parse(post.body)))\r\n\r\n                            this.setState({item: post,\r\n                                editorState: editorState\r\n                            });\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onChangeRichTextEditor = (newEditorState) =>{\r\n      this.setState({editorState: newEditorState});\r\n\r\n    }\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({item});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {item, editorState} = this.state;\r\n        item.body = JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n        console.log(JSON.stringify(item));\r\n        if(item.id) {\r\n            axios.put(`/api/posts/${item.id}`, item, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': authHeader()\r\n                    }\r\n                \r\n                }).then(response => {\r\n                    this.setState({redirectToPosts: true})\r\n            \r\n                }).catch(err => console.log(err.response));\r\n\r\n        }\r\n        else {\r\n            await axios.post(`/api/posts`, item, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n                \r\n            }).then(response => {\r\n                this.setState({redirectToPosts: true})\r\n        \r\n            }).catch(err => console.log(err.response));\r\n        }\r\n    }\r\n    render() {\r\n        //console.log(\"editor text\", editorState.getCurrentContent().getPlainText(''));\r\n        //const {editorStateUpdated} = this.state.editorState;\r\n        const heading = <h2>{this.state.item.id ? 'Edit Post' : 'New Post'}</h2>;\r\n        if(this.state.redirectToPosts) {\r\n            this.state.redirectToPosts = false;\r\n            return <Navigate to=\"/posts\"/>\r\n        }\r\n        else {\r\n            return <div>\r\n                <Container>\r\n                    {heading}\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <FormGroup>\r\n                            <Label for=\"title\">Title</Label>\r\n                            <Input type=\"text\" name=\"title\" id=\"title\" value={this.state.item.title || ''}\r\n                                onChange={this.handleChange} autoComplete=\"title\"/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"body\">Body</Label>\r\n\r\n                            {this.onChangeRichTextEditor ?\r\n\r\n                                <RichTextEditor\r\n                                    editorState={this.state.editorState}\r\n                                    onChange={this.onChangeRichTextEditor}\r\n                                /> :\r\n                                <div/>\r\n                            }\r\n\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                            <Button color=\"secondary\" tag={Link} to=\"/posts\">Cancel</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        }\r\n    }\r\n}\r\nexport default withRouter(PostEdit);","  import React, {Component, useState, useRef} from 'react';\r\nimport '../Styles/CommentBox.scss'\r\nimport cn from 'classnames';\r\n\r\nconst INITIAL_HEIGHT = 46;\r\nexport default class CommentBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const outerHeight = INITIAL_HEIGHT;\r\n        this.state = ({isExpanded: false});\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    onExpand = () => {\r\n\t\tif (!this.state.isExpanded) {\r\n          this.outerHeight = document.scrollHeight;\r\n          this.setState({isExpanded: true});\r\n        }\r\n\t}\r\n\r\n    render() {\r\n        const { commentValue, handleCommentValue,\r\n         enterCommentLine, submitCommentLine, onClose, isExpanded} = this.props;\r\n         this.state.isExpanded = isExpanded;\r\n         const enableCommentButton = () => {\r\n          return (commentValue ? false : true);\r\n        }\r\n         const changeCommentButtonStyle = () => {\r\n          return (commentValue ? \"comments-button-enabled\" :\r\n          \"comments-button-disabled\");\r\n        }\r\n\r\n\r\n        return (\r\n         <form\r\n             onSubmit={submitCommentLine}\r\n             onChange={handleCommentValue}\r\n             className={cn(\"comment-box\", {\r\n               expanded: isExpanded,\r\n               collapsed: !isExpanded,\r\n                    modified: commentValue.length > 0,\r\n             })}\r\n             style={{\r\n               minHeight: isExpanded ? this.outerHeight : INITIAL_HEIGHT\r\n             }}\r\n           >\r\n         <div className={'header headerComment'}>\r\n             <div className={'user'}>\r\n               <img\r\n                 src=\"avatar/path\"\r\n                 alt=\"User avatar\"\r\n               />\r\n               <span>User Name</span>\r\n             </div>\r\n           </div>\r\n         <div className={'header headerComment'}> ... </div>\r\n\r\n           <label className={'label labelComment'} htmlFor=\"comment\">What are your thoughts?</label>\r\n           <textarea\r\n\r\n             onClick={this.onExpand}\r\n             onFocus={this.onExpand}\r\n             onChange={handleCommentValue}\r\n             className=\"comment-field\"\r\n             placeholder=\"What are your thoughts?\"\r\n             value={commentValue}\r\n             name=\"comment\"\r\n             id=\"comment\"\r\n            />\r\n         <div className=\"actions\">\r\n             <button type=\"button\" className=\"cancel\" onClick={onClose}>\r\n               Cancel\r\n             </button>\r\n             <button type=\"submit\"  disabled={commentValue.length < 1}>\r\n               Enter\r\n             </button>\r\n         </div>\r\n         </form>\r\n         )\r\n\r\n    }\r\n}","    import React, {Component, useState} from 'react';\r\nimport {OverlayTrigger, Tooltip, Popover, Container, ListGroup, Button, Row, Col, FormLabel} from 'react-bootstrap';\r\nimport '../Styles/CommentBox.scss';\r\nimport Avatar from 'react-avatar';\r\nimport cn from 'classnames';\r\nimport moment from 'moment';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowAltCircleUp, faArrowAltCircleDown} from \"@fortawesome/free-solid-svg-icons\"\r\nimport {convertFromRaw} from 'draft-js';\r\nimport renderHTML from 'react-render-html';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\n\r\nclass CommentList extends Component {\r\n\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.commentListSorted = null;\r\n        this.state = {\r\n            isLoading: true,\r\n            commentCount: 0,\r\n            upVotes: 0,\r\n            downVotes: 0,\r\n            isUpVotingDisabled: false,\r\n            isDownVotingDisabled: false\r\n        }\r\n        this.commentList = null;\r\n\r\n       \r\n    }\r\n\r\n\r\n    tallyVotes(votes) {\r\n        var upVoteCount = 0;\r\n        var downVoteCount = 0;\r\n        if(votes && votes.length > 0)\r\n        {\r\n            votes.forEach(vote => {\r\n                if(vote.voteType === \"UP\") upVoteCount++;\r\n                else if(vote.voteType === \"DOWN\") downVoteCount++;\r\n            })\r\n        }\r\n        console.log(\"Tallying votes\", upVoteCount, downVoteCount);\r\n        return {upVoteCount, downVoteCount};\r\n    }\r\n\r\n\r\n    renderTooltip = (props) => (\r\n\r\n        <Popover id=\"avatar-tooltip\" {...props}>\r\n            <Popover.Header>\r\n\r\n                {props.popper.state ?\r\n                    <div>\r\n                        <b>Name:</b> {props.popper.state.options.name}\r\n                        <br/>\r\n                        {props.popper.state.options.title ?\r\n                            <i>{props.popper.state.options.title}</i> : <div/>\r\n                        }    \r\n                    </div>\r\n                    : <div/>\r\n                }\r\n\r\n            </Popover.Header>\r\n            <Popover.Body>\r\n                {props.popper.state ?\r\n                    <div>\r\n\r\n                        {/* {JSON.stringify(props.popper.state.options.userProfile.profileHeading)} */}\r\n                        <b>A little about me:</b> {props.popper.state.options.body ?\r\n                            <div>\r\n                                {renderHTML(\r\n                                    stateToHTML(\r\n                                        convertFromRaw(\r\n                                            JSON.parse(props.popper.state.options.body))))}\r\n                            </div>\r\n                            : <div>N/a</div> }\r\n                    </div>\r\n                : <div>\r\n                    Loading...\r\n                </div>\r\n                }\r\n            </Popover.Body>\r\n        </Popover>\r\n    \r\n    );\r\n\r\n    refreshCommentList() {\r\n\r\n        const { role,\r\n            comments,\r\n            commentProfiles,\r\n            incrementDownVote,\r\n            incrementUpVote,\r\n            upVoteDisabled,\r\n            downVoteDisabled,\r\n            icons,\r\n            removeComment,\r\n            count,\r\n            currentUsername,\r\n            currentRole\r\n            } = this.props;\r\n        console.log(\"CurrentRole\", currentRole );\r\n        console.log(\"Comment list properties\", this.props);\r\n        //if(count === this.state.commentCount) return;\r\n\r\n        console.log(\"Refreshing the comment component\",comments, icons, role)\r\n        //console.log(\"Icon dictionary keys\", Object.keys(icons));\r\n        this.commentListSorted = comments.sort(function(a,b) {\r\n            return a.createdAt < b.createdAt ? -1 : 1;\r\n        });\r\n        var options = { month: 'long'};\r\n        console.log(\"RefreshCommentList commentProfiles\", commentProfiles);\r\n        // for(let [key, profile] of Object.entries(commentProfiles)) {\r\n        //     var bodyHTML = \"\"\r\n        //     if(profile.profileInfo !== null)\r\n        //         bodyHTML = stateToHTML(convertFromRaw(JSON.parse(profile.profileInfo)));\r\n        //     commentProfiles[key].profileInfo = bodyHTML;\r\n\r\n        // }\r\n\r\n        //console.log(\"CommentProfiles with bodyHTML\", commentProfiles);\r\n        this.commentList = this.commentListSorted.map(val => {\r\n            var options = { month: 'long'};\r\n            var d = new Date( val.createdAt * 1000);\r\n            var month = d.toLocaleDateString(\"en-US\", options);\r\n            var dateStr = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n            console.log(\"current comment in list\", val, icons[val.posterUsername]);\r\n            const {upVoteCount, downVoteCount} = this.tallyVotes(val.votes);\r\n            console.log(\"UpVotes\", upVoteCount);\r\n            console.log(\"DownVotes\", downVoteCount);\r\n\r\n            return (\r\n                <div>\r\n                <Container>\r\n                    <Row>\r\n                        <div>\r\n                            \r\n                            {val.commentText ?\r\n                                <ListGroup.Item>\r\n                                \r\n\r\n                                    {icons[val.posterUsername] ?\r\n                                        <div>\r\n                                        {commentProfiles[val.posterUsername] ?\r\n                                            <div>\r\n                                            <OverlayTrigger\r\n                                                placement=\"top\"\r\n                                                delay={{ show: 250, hide: 400 }}\r\n                                                overlay={this.renderTooltip}\r\n                                                popperConfig=\r\n                                                    {{name  : commentProfiles[val.posterUsername].name,\r\n                                                    title : commentProfiles[val.posterUsername].profileHeading,\r\n                                                    body: commentProfiles[val.posterUsername].profileInfo}} >\r\n                                            <div style={{width: \"75px\"}}>   \r\n                                            <Avatar size=\"50\"\r\n                                                round={true}\r\n                                                name={val.posterName}\r\n                                                src={icons[val.posterUsername]}/>\r\n                                            </div>\r\n                                            </OverlayTrigger>\r\n                                            </div>\r\n                                        : <div style={{width: \"75px\"}}>   \r\n                                            <Avatar size=\"50\"\r\n                                                round={true}\r\n                                                name={val.posterName}\r\n                                                src={icons[val.posterUsername]}/>\r\n                                            </div>\r\n                                        }\r\n                                   \r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                            {commentProfiles[val.posterUsername] ?\r\n                                                <div>\r\n                                                <OverlayTrigger\r\n                                                    placement=\"top\"\r\n                                                    delay={{ show: 250, hide: 400 }}\r\n                                                    overlay={this.renderTooltip}\r\n                                                    popperConfig=\r\n                                                        {{name  : commentProfiles[val.posterUsername].name,\r\n                                                        title : commentProfiles[val.posterUsername].profileHeading,\r\n                                                        body: commentProfiles[val.posterUsername].profileInfo}} >\r\n                                                <div style={{width: \"75px\"}}>   \r\n                                                <Avatar size=\"50\"\r\n                                                    round={true}\r\n                                                    name={val.posterName}/>\r\n                                                </div>\r\n                                                \r\n                                                </OverlayTrigger>\r\n                                                </div>: \r\n                                                 <div style={{width: \"75px\"}}>   \r\n                                                 <Avatar size=\"50\"\r\n                                                     round={true}\r\n                                                     name={val.posterName}/>\r\n                                                 </div>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                {val.commentName}\r\n                                <br/>\r\n                                {dateStr}\r\n                                <br/>\r\n                                {val.commentText}\r\n                                </ListGroup.Item> :\r\n                                <div/>\r\n                            }\r\n                        </div>\r\n                    </Row>\r\n                        <Row alignItems=\"flex-end\">\r\n                            <Col>\r\n                                <Button\r\n                                        disabled={upVoteDisabled[val.id] || \r\n                                            currentRole === \"ROLE_GUEST\" ||\r\n                                            currentUsername === val.posterUsername}\r\n                                        size=\"sm\"\r\n                                        color=\"primary\"\r\n                                        className=\"rounded-circle\"\r\n                                        onClick={() => incrementUpVote(val.id)}>\r\n                                    <FontAwesomeIcon icon={faArrowAltCircleUp}/>\r\n                                </Button>\r\n                                <FormLabel> {upVoteCount !== 0 ? upVoteCount : \" \"}</FormLabel>\r\n                                <span> </span>\r\n\r\n                                <Button disabled =\r\n                                        {downVoteDisabled[val.id] || \r\n                                            currentRole === \"ROLE_GUEST\" ||\r\n                                            currentUsername === val.posterUsername}\r\n                                        size=\"sm\"\r\n                                        color=\"primary\"\r\n                                        className = \"rounded-circle\"\r\n                                        onClick={() => incrementDownVote(val.id)}>\r\n                                    <FontAwesomeIcon icon={faArrowAltCircleDown}/>\r\n                                </Button>\r\n                                <FormLabel> {downVoteCount !== 0 ? downVoteCount : \" \"} </FormLabel>\r\n                            </Col>\r\n                        </Row>\r\n                    <Row>\r\n\r\n                        <Col>\r\n                        {role === \"ROLE_ADMIN\" ?\r\n                            <Button size=\"sm\" color=\"danger\" onClick={\r\n                                () => removeComment(val.id)}>Delete</Button>\r\n                            : <div/>\r\n                        }\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.refreshCommentList();\r\n\r\n        this.setState({isLoading: false,\r\n            commentCount: this.commentList.length});\r\n\r\n    }\r\n    render() {\r\n\r\n        this.refreshCommentList();\r\n//        this.state.commentCount = this.commentList.length;\r\n        if(this.state.isLoading) return (<div/>);\r\n        return (\r\n              <Container>\r\n              <ListGroup>\r\n                {this.commentList}\r\n              </ListGroup>\r\n              </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentList;","import React, { Component, useState } from 'react';\r\nimport { Link, useLocation} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button, Container, Card, CardHeader, CardTitle, CardBody, CardText, CardFooter, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport CommentBox from './CommentBox';\r\nimport CommentList from './CommentList';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport moment from 'moment';\r\nimport {authenticationService as auth} from '../services/authenticationService';\r\nimport {getImageService as getImgSvc} from '../services/getImageService';\r\nimport {getNameService as getNameSvc} from '../services/getNameService';\r\nimport {convertFromRaw} from 'draft-js';\r\nimport renderHTML from 'react-render-html';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\nimport {withRouter} from '../Routes/withRouter'\r\nlet commentCounter = 1;\r\nlet location\r\n\r\nconst UseLocation = () => {\r\n  location = useLocation()\r\n  return null\r\n}\r\nclass PostView extends Component {\r\n\r\n    emptyItem = {\r\n        title: '',\r\n        date: '',\r\n        body: '',\r\n    };\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var post_id;\r\n\r\n        this.state = {\r\n            title: '',\r\n            date: '',\r\n            body: '',\r\n            commentValue: '',\r\n            comments: [],\r\n            icons: {},\r\n            currentCount: commentCounter,\r\n            votes: {},\r\n            usersVoted: {},\r\n            upVoteDisabled: {},\r\n            downVoteDisabled: {},\r\n            username: \"\",\r\n            commentProfiles: {},\r\n            isExpanded : false,\r\n            isLoading: true\r\n        }\r\n\r\n        this.handleCommentValue = this.handleCommentValue.bind(this);\r\n        this.enterCommentLine = this.enterCommentLine.bind(this);\r\n        this.submitCommentLine = this.submitCommentLine.bind(this);\r\n        this.onCommentClose = this.onCommentClose.bind(this);\r\n        this.setCommentLine = this.setCommentLine.bind(this);\r\n        this.removeComment = this.removeComment.bind(this);\r\n        this.incrementUpVote = this.incrementUpVote.bind(this);\r\n        this.incrementDownVote = this.incrementDownVote.bind(this);\r\n        this.updateUserVoted = this.updateUserVoted.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n    //    console.log(this.props.match.params.id)\r\n//        console.log(this.item);\r\n        //console.log(this.props.match.params.id);\r\n        this.currentRole = \"ROLE_GUEST\";\r\n        this.post_id = this.props.params.id;\r\n        console.log(\"post id\", this.post_id);\r\n        \r\n        this.state.username = auth.getUsernameFromJWT();\r\n        this.getPostAndComments();\r\n        await this.getUserProfiles();\r\n    \r\n    }\r\n\r\n    async getUserProfiles() {\r\n        if(this.currentRole !== \"ROLE_GUEST\") {\r\n            \r\n            var commentProfiles = {};\r\n           \r\n            await axios.get('/api/clients/getAll', {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': authHeader()\r\n                }\r\n            }).then(response => {\r\n                \r\n                response.data.forEach(client => {\r\n                    console.log(\"Client\", client);\r\n                    commentProfiles[client.username] = client;\r\n                    \r\n                })\r\n\r\n                console.log(\"commentProfiles\", commentProfiles);\r\n                this.setState({commentProfiles: commentProfiles});\r\n            }).catch(err => console.log(err));\r\n\r\n        }   \r\n    }\r\n    async getPostAndComments() {\r\n        if(getNameSvc.currentRoleValue) this.currentRole = getNameSvc.currentRoleValue.roleName;\r\n        //console.log(\"ComponentDidMount currentRole\", this.currentRole);\r\n        var state = {\r\n            title: \"\",\r\n            date: \"\",\r\n            body: \"\",\r\n            comments: {},\r\n            icons: {},\r\n            currentCount: 0,\r\n            votes: {},\r\n            usersVoted: {},\r\n            upVoteDisabled: {},\r\n            downVoteDisabled: {}\r\n        }\r\n        await axios.get(`/api/posts/${this.post_id}`,\r\n        {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \r\n            }\r\n        }).then(response => {\r\n        state.title = response.data.title;\r\n        state.date = response.data.modifiedAt;\r\n        state.body = response.data.body;\r\n        state.comments = response.data.comments;\r\n        console.log(state.comments);\r\n\r\n        }).catch(err => {console.log(err)});\r\n        //occasionally a lone comment is deleted, leaving a null reference\r\n        //to comments in the parent Post Object, which needs to be discarded\r\n        if(state.comments && state.comments[0] === null) state.comments.pop();\r\n        if(state.comments && state.comments[0]) {\r\n        const usernameSet = new Set();\r\n        const imageSet = new Set();\r\n\r\n            state.comments.map(comment => {\r\n                    //console.log(\"Comment:\", comment);\r\n                    state.currentCount++;\r\n                    state.votes[comment.id] = comment.votes;\r\n                    state.usersVoted[comment.id] = {};\r\n                    if(comment.usersVoted !== null && Object.keys(comment.usersVoted).length >= 0)\r\n                    {\r\n\r\n                        state.usersVoted[comment.id] =\r\n                            comment.usersVoted[comment.id];\r\n                    }\r\n                    else state.usersVoted[comment.id][comment.posterUsername] = false;\r\n                    usernameSet.add(comment.posterUsername)\r\n            });\r\n\r\n\r\n            //when page is first loaded, ensure correct upvote and downvote buttons\r\n            //are enabled for the current user\r\n            state.comments.forEach(comment => {\r\n                state.upVoteDisabled[comment.id] = false;\r\n                state.downVoteDisabled[comment.id] = false;\r\n                if(comment.votes) {\r\n                    comment.votes.forEach(vote => {\r\n                        if(vote.username === this.state.username) {\r\n                            if(vote.voteType === \"UP\") {\r\n                                state.upVoteDisabled[comment.id] = true;\r\n                            }\r\n                            else if(vote.voteType === \"DOWN\") {\r\n                                state.downVoteDisabled[comment.id] = true;\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n            var usernameArr = Array.from(usernameSet);\r\n            var index = 0;\r\n            console.log(usernameArr);\r\n            await usernameArr.forEach(username => {\r\n                axios.get(`/api/getImage/${username}`, {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        \r\n                    }\r\n\r\n                }).then(response => {\r\n                    if(response.data){\r\n                        console.log(\"image received\", response.data);\r\n                        var key = response.data.username;\r\n                        state.icons[key] = response.data.strBase64File;\r\n\r\n                    }\r\n                    index++;\r\n                    //call render when all images have been retrieved from the server\r\n\r\n                    if(index === usernameArr.length) {\r\n                        //update the commentCounter\r\n                        commentCounter = state.currentCount;\r\n                        this.setState({\r\n                            title: state.title,\r\n                            date: state.date,\r\n                            body: state.body,\r\n                            comments: state.comments,\r\n                            icons: state.icons,\r\n                            currentCount: state.currentCount,\r\n                            upVoteDisabled: state.upVoteDisabled,\r\n                            downVoteDisabled: state.downVoteDisabled,\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n\r\n                });\r\n            })\r\n\r\n        }\r\n        else {\r\n            var imageData = getImgSvc.currentImageValue;\r\n            console.log(imageData)\r\n            if(imageData) {\r\n                state.icons[imageData.username] = imageData.strBase64File;\r\n            }\r\n            else {\r\n                var username = auth.currentUserValue;\r\n                state.icons[username] = null;\r\n            }\r\n                //update the commentCounter\r\n            commentCounter = state.currentCount;\r\n            var votes = null;\r\n            var usersVoted = null;\r\n            this.setState({\r\n                title: state.title,\r\n                date: state.date,\r\n                body: state.body,\r\n                comments: state.comments,\r\n                icons: state.icons,\r\n                votes: votes,\r\n                usersVoted : usersVoted,\r\n                currentCount: state.currentCount,\r\n                isLoading: false\r\n            });\r\n        }\r\n\r\n    }\r\n    handleCommentValue = (e) => {\r\n        this.setState({commentValue: e.target.value});\r\n    }\r\n    async incrementUpVote(id) {\r\n        console.log(\"Attempting to increment vote for\", this.state.username, id);\r\n        const vote = {\r\n            id: null,\r\n            postId: this.post_id,\r\n            commentId: id,\r\n            username:  this.state.username,\r\n            voteType: \"UP\",\r\n\r\n        }\r\n        this.state.comments = this.updateCommentsWithVote(vote);\r\n        await this.setCommentWithVotes(id);\r\n        this.state.upVoteDisabled[id] = true;\r\n        this.state.downVoteDisabled[id] =  false;\r\n        this.setState({});\r\n\r\n\r\n    }\r\n\r\n    async incrementDownVote(id){\r\n          console.log(\"Attempting to decrement vote for\", this.state.username, id);\r\n\r\n           const vote = {\r\n                id: null,\r\n                postId: this.post_id,\r\n                commentId: id,\r\n                username:  this.state.username,\r\n                voteType: \"DOWN\",\r\n\r\n            }\r\n\r\n            this.state.comments = this.updateCommentsWithVote(vote);\r\n            await this.setCommentWithVotes(id);\r\n            this.state.upVoteDisabled[id] = false;\r\n            this.state.downVoteDisabled[id] =  true;\r\n            this.setState({});\r\n\r\n    }\r\n\r\n    updateCommentsWithVote(vote) {\r\n        //get existing vote for this user on this comment\r\n        let existingVote = null;\r\n        let updatedComments = null;\r\n        let votes = [];\r\n        let vote_pushed = false;\r\n        this.state.comments.forEach(comment => {\r\n            if(comment.id === vote.commentId) {\r\n                if(comment.votes) {\r\n                    comment.votes.forEach(tmp_vote => {\r\n                        if(tmp_vote.username === this.state.username) {\r\n                            votes.push(vote);\r\n                            vote_pushed = true;\r\n                        }\r\n                        else votes.push(tmp_vote)\r\n                    })\r\n                }\r\n                if(!vote_pushed) votes.push(vote);\r\n\r\n            }\r\n        })\r\n        console.log(\"Before updating votes\", this.state.comments, votes);\r\n        updatedComments = this.state.comments.map(comment => {\r\n            console.log(\"Current comment\", comment);\r\n            if(comment.id === vote.commentId) comment.votes = votes;\r\n            return comment;\r\n        })\r\n        console.log(\"After updating votes\", updatedComments, votes);\r\n        return updatedComments;\r\n    }\r\n    updateUserVoted(id, val) {\r\n\r\n        this.state.usersVoted[id][this.state.username] = val;\r\n    }\r\n    async setCommentWithVotes(id) {\r\n        var comment = null;\r\n        this.state.comments.forEach(com => {\r\n            if(com.id === id) comment = com;\r\n        })\r\n        var savedComment = await this.submitComment(comment);\r\n        console.log(\"savedComment\", savedComment);\r\n        if(savedComment) {\r\n            var newComment = {\r\n                id: savedComment.id,\r\n                posterName: savedComment.posterName,\r\n                posterUsername: savedComment.posterUsername,\r\n                createdAt: savedComment.createdAt,\r\n                commentText: savedComment.commentText,\r\n                votes: savedComment.votes[savedComment.id],\r\n                usersVoted: savedComment.usersVoted\r\n            }\r\n\r\n            //modify existing comment to update votes and usersVoted\r\n            if(this.state.comments) {\r\n                var index  = this.state.comments.findIndex(comment => comment.id === id)\r\n                if(index >= 0) {\r\n                this.state.comments.splice(index, 1)\r\n                this.state.comments.push(savedComment);\r\n                }\r\n                else this.state.comments.push(savedComment);\r\n    //            this.state.comments.push(newComment);\r\n            }\r\n\r\n            if(Object.keys(this.state.votes) > 0)\r\n                this.state.votes[id] = savedComment.votes;\r\n            else {\r\n                this.state.votes = {};\r\n                this.state.votes[id] = savedComment.votes;\r\n            }\r\n            if(Object.keys(this.state.usersVoted) > 0)\r\n                this.state.usersVoted[id] = savedComment.usersVoted;\r\n            else {\r\n                this.state.usersVoted = {}\r\n                this.state.usersVoted[id] = savedComment.usersVoted;\r\n            }\r\n    //        var img = getImgSvc.currentImageValue\r\n    //\r\n    //        this.state.icons[savedComment.posterUsername] = img;\r\n            this.setState({\r\n            commentValue: \"\"\r\n            });\r\n            \r\n        }\r\n    }\r\n    async setComment() {\r\n        commentCounter++;\r\n\r\n        var comment = {\r\n            id: null,\r\n            postId: this.props.params.id,\r\n            posterName: getNameSvc.currentNameValue,\r\n            posterUsername: auth.getUsernameFromJWT(),\r\n            commentText: this.state.commentValue,\r\n            votes: null,\r\n            usersVoted: null\r\n        }\r\n        var savedComment = await this.submitComment(comment);\r\n\r\n        var newComment = {\r\n            id: savedComment.id,\r\n            posterName: savedComment.posterName,\r\n            posterUsername: savedComment.posterUsername,\r\n            createdAt: savedComment.createdAt,\r\n            commentText: savedComment.commentText,\r\n            votes: savedComment.votes,\r\n            usersVoted: savedComment.usersVoted\r\n        }\r\n\r\n        if(this.state.comments) this.state.comments.push(newComment);\r\n        else{\r\n            this.state.comments = [];\r\n            this.state.comments.push(newComment);\r\n        }\r\n        if(this.state.votes) this.state.votes[newComment.id] = null;\r\n        else{\r\n            this.state.votes = {};\r\n            this.state.votes[newComment.id]  = null;\r\n        }\r\n\r\n        var img = getImgSvc.currentImageValue\r\n\r\n        this.state.icons[savedComment.posterUsername] = img;\r\n        console.log(\"usersVoted Undefined setComment Function?\", this.state.usersVoted);\r\n        if(this.state.usersVoted == null || typeof(this.state.usersVoted) === 'undefined')\r\n        {\r\n            this.state.usersVoted = {}\r\n            this.state.usersVoted[newComment.id] = {};\r\n            this.state.usersVoted[newComment.id][this.state.username] = false;\r\n        }\r\n        console.log(\"usersVoted after setComment Function?\", this.state.usersVoted);\r\n        this.setState({\r\n        commentValue: \"\"\r\n\r\n        });\r\n\r\n    }\r\n    setCommentLine() {\r\n        //console.log(\"username\",auth.getUsernameFromJWT());\r\n        const promise = auth.verifyLogin();\r\n        if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) this.setComment();\r\n            })\r\n        } else console.log(\"Could not verify login credentials\");\r\n\r\n\r\n\r\n        console.log(\"Upon comment submit\", this.state.comments);\r\n\r\n    }\r\n\r\n    async submitComment(comment) {\r\n        var savedComment = \"\";\r\n\r\n        const updatedComment = JSON.stringify(comment);\r\n        console.log(\"Comment to put\", updatedComment);\r\n//        await fetch(`/api/posts/comments/${this.props.location.state.params.id}`,{\r\n//                method: 'post',\r\n//                body: updatedComment,\r\n//                 headers: {\r\n//                    'Accept': 'application/json',\r\n//                    'Content-Type': 'application/json',\r\n//                    'Authorization': authHeader()\r\n//            },\r\n//        }).then(response => {\r\n//            savedComment  = response.data;\r\n//\r\n//\r\n//        }).catch(err => {\r\n//            console.log(err)\r\n//        });\r\n        const promise = auth.verifyLogin();\r\n        //console.log(\"Auth VerifyLogin Promise in SubmitComment\", promise);\r\n        if(promise) {\r\n            promise.then(res => {\r\n                axios({\r\n                    method: 'post',\r\n                    url: `/api/posts/comments/${this.post_id}`,\r\n                    data: updatedComment,\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': authHeader()\r\n                    }\r\n                }).then(response => {\r\n                    console.log(\"Response in submitComment\", response);\r\n                    savedComment = response.data;\r\n                }).catch(err => {\r\n                    console.log(\"PutComment error\", err);\r\n                });\r\n                console.log(\"SubmitComment\", savedComment);\r\n                return savedComment;\r\n\r\n            })\r\n        }\r\n       \r\n    }\r\n\r\n    async getIconImage(username) {\r\n        await axios.get(`/api/getImage/${username}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n\r\n        }).then(response => {\r\n\r\n            return response.data.strBase64File;\r\n        })\r\n    }\r\n    submitCommentLine = (e) => {\r\n         e.preventDefault();\r\n         this.setCommentLine();\r\n    };\r\n    enterCommentLine = (e) => {\r\n\r\n         if (e.charCode === 13) {\r\n          this.setCommentLine();\r\n         }\r\n    };\r\n\r\n    onCommentClose = () => {\r\n\r\n        this.setState({commentValue: \"\", isExpanded: false});\r\n    }\r\n\r\n    async removeComment(id) {\r\n        var currComments = this.state.comments;\r\n        var currCommentCount = 0;\r\n        var index = 0;\r\n        var commentIndex = 0;\r\n        currComments.forEach(comment => {\r\n            if(comment.id === id) commentIndex = index;\r\n            index++;\r\n        })\r\n\r\n        if(index >= 0) {\r\n            //update all other commentId's by decrementing higher id's by one\r\n\r\n            if(currComments.length === 1) currComments = [];\r\n            else {\r\n                currComments.splice(commentIndex, 1);\r\n\r\n            }\r\n            commentCounter--;\r\n            await axios.delete(`/api/posts/comments/${id}`, {\r\n                headers: {'Authorization': authHeader()}\r\n\r\n            }).then(response => {\r\n                //console.log(\"removeComment successful\");\r\n                this.setState({comments: currComments})\r\n            })\r\n        }\r\n        else console.log(\"Could not find comment to delete\");\r\n\r\n    }\r\n//\r\n//    handleChange(event) {\r\n//        const target = event.target;\r\n//        const value = target.value;\r\n//        const name = target.name;\r\n//        let item = {...this.state.item};\r\n//        item[name] = value;\r\n//        this.setState({item});\r\n//    }\r\n\r\n\r\n    render() {\r\n        const {title,\r\n            date,\r\n            body,\r\n            commentValue,\r\n            comments,\r\n            upVoteDisabled,\r\n            downVoteDisabled,\r\n            icons,\r\n            commentProfiles,\r\n            isExpanded,\r\n            isLoading} = this.state;\r\n//        var comments = rawComments;\r\n//        if(comments && comments.length > 0 && comments[0] === '') comments.shift();\r\n//        if(comments && comments.length === 0) comments = [];\r\n        console.log(\"render state\", this.state);\r\n        //console.log(\"render props\", this.incrementUpVote, this.incrementDownVote);\r\n        //console.log(\"Icon dictionary keys\", Object.keys(icons));\r\n        if(isLoading) { return <div/>}\r\n\r\n        var bodyHTML = \"\"\r\n        if(body) bodyHTML = stateToHTML(convertFromRaw(JSON.parse(body)));\r\n        var options = { month: 'long'};\r\n\r\n        var currentRole = this.currentRole;\r\n        var d = new Date( date * 1000);\r\n        var month = d.toLocaleDateString(\"en-US\", options);\r\n        var dateStr = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n        return <div>\r\n            <Container>\r\n                <Card>\r\n                <CardHeader>\r\n                    <CardTitle>\r\n                        <h2><em>{title}</em></h2>\r\n                        {dateStr}\r\n                    </CardTitle>\r\n\r\n                </CardHeader>\r\n                <CardBody>\r\n\r\n                    <CardText>{renderHTML(bodyHTML)}</CardText>\r\n                </CardBody>\r\n\r\n                </Card>\r\n                {auth.loggedIn ?\r\n                    <CommentBox\r\n                        commentValue = {commentValue}\r\n                        handleCommentValue = {this.handleCommentValue}\r\n                        enterCommentLine = {this.enterCommentLine}\r\n                        submitCommentLine = {this.submitCommentLine}\r\n                        onClose = {this.onCommentClose}\r\n                        isExpanded = {this.isExpanded}\r\n                    /> : <div/> }\r\n                 {(typeof(comments) !== 'undefined' && comments && comments.length > 0) ?\r\n                    <div>\r\n\r\n                        <CommentList\r\n                            role = {currentRole}\r\n                            comments={comments}\r\n                            commentProfiles={commentProfiles}\r\n                            incrementUpVote = {this.incrementUpVote}\r\n                            incrementDownVote = {this.incrementDownVote}\r\n                            upVoteDisabled = {upVoteDisabled}\r\n                            downVoteDisabled = {downVoteDisabled}\r\n                            icons={icons}\r\n                            removeComment = {this.removeComment}\r\n                            count = {comments.length}\r\n                            currentUsername = {this.state.username}\r\n                            currentRole = {this.currentRole}\r\n                            />\r\n\r\n                    </div> :\r\n                    <div/>\r\n                 }\r\n                 <Button color=\"primary\" tag={Link} to=\"/posts\">Return to Posts</Button>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\nexport default withRouter(PostView);","import React, {Component} from 'react';\r\nimport { Route, Routes, Navigate} from 'react-router-dom';\r\nimport { MemoryRouter } from 'react-router';\r\nimport Home from './Pages/Home';\r\nimport Posts from './Pages/Posts'\r\nimport Profile from './Pages/Profile'\r\nimport RegistrationSuccess from './Pages/RegistrationSuccess';\r\nimport RegistrationForm from './auth/RegistrationForm';\r\nimport LoginForm from './auth/LoginForm';\r\nimport UserModal from './Components/UserModal';\r\nimport PostEdit from \"./Components/PostEdit\";\r\nimport PostView from \"./Components/PostView\";\r\nimport AppNavbar from \"./Components/AppNavbar\";\r\nimport history from \"./Components/history\";\r\nimport {authenticationService as auth} from './services/authenticationService';\r\nexport default class InnerApp extends React.PureComponent{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                  <div>\r\n                  <AppNavbar/>\r\n                  <Routes>\r\n                    <Route path='/'\r\n                        element={\r\n                            <customRoute path=\"/\">\r\n                                <Home/>\r\n                            </customRoute>\r\n                        }\r\n\r\n                    />\r\n                    <Route path='/posts'\r\n                        element={<Posts/>}                       \r\n                    />\r\n    \r\n                    <Route path='/posts/edit/:id'\r\n                        element={\r\n                            <requireAuth redirectTo=\"/\">\r\n                                <PostEdit/>\r\n                            </requireAuth>\r\n                        }\r\n                    />\r\n\r\n                    <Route path='/posts/view/:id'\r\n                        element= {<PostView/>}\r\n                    />\r\n                    <Route path='/registration'\r\n                        element={\r\n                            <requireAuth redirectTo=\"/\">\r\n                                <RegistrationSuccess/>\r\n                            </requireAuth>\r\n                        }\r\n                    />\r\n                    <Route path='/profile'\r\n                        element={\r\n                            <requireAuth redirectTo=\"/\">\r\n                                <Profile/>\r\n                            </requireAuth>\r\n                        }\r\n                    />\r\n                  </Routes>\r\n                  </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction requireAuth({children, redirectTo}) {\r\n    return auth.loggedIn === true\r\n        ? children\r\n        : <Navigate to={redirectTo}/>\r\n}\r\n\r\nfunction customRoute({children, path}) {\r\n\r\n    if(path === '/' && auth.loggedIn ) auth.logout();\r\n    else return children;\r\n\r\n}","import React, { Component, useState } from 'react';\nimport './Styles/App.scss'\nimport {createContext, useContext} from \"react\";\nimport {authenticationService as auth} from \"./services/authenticationService\";\nimport InnerApp from \"./InnerApp\";\n//export function useAuth(){\n//    return useContext(AuthContext);\n//}\n\n\nfunction App(props) {\n//    const [showModal, setShowModal] = useState(false);\n//    subscribeModal.subscribe(() => {\n//        setShowModal(prev => !prev);\n//    })\n\n    const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n    const [authTokens,setAuthTokens] = useState(existingTokens || null);\n\n    const setTokens = (data) => {\n        console.log(\"setting tokens in localStorage\");\n        localStorage.setItem(\"tokens\",JSON.stringify(data));\n        setAuthTokens(data);\n    }\n    return(\n\n            <InnerApp/>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport history from \"./Components/history\";\nimport {Router} from \"react-router-dom\";\nimport {CustomRouter} from \"./Routes/CustomRouter\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <CustomRouter history={history}>\n    <App/>\n    </CustomRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}