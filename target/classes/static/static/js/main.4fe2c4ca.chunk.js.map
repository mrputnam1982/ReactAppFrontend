{"version":3,"sources":["Components/history.js","services/getNameService.js","services/getImageService.js","services/authenticationService.js","auth/LoginForm.js","Components/MyToast.js","Components/CustomAvatarEditor.js","auth/RegistrationForm.js","Components/UserModal.js","Components/AppNavbar.js","Components/Landing.js","images/alpinelake_bg.jpg","Pages/Home.js","helpers/auth-header.js","Components/PostList.js","helpers/Pagination.js","Pages/Posts.js","Components/RichTextEditor.js","Components/ProfileEdit.js","Pages/Profile.js","Pages/RegistrationSuccess.js","Components/PostEdit.js","Components/CommentBox.js","Components/CommentList.js","Components/PostView.js","Routes/PrivateRoute.js","Routes/CustomRoute.js","InnerApp.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","currentNameSubject","BehaviorSubject","currentRoleSubject","getNameService","setName","name","next","localStorage","setItem","currentName","asObservable","currentNameValue","getItem","value","setRole","role","JSON","stringify","currentRole","currentRoleValue","parse","currentImageSubject","getImageService","setImage","image","currentImage","currentImageValue","currentUserSubject","authenticationService","login","logout","getUsernameFromJWT","user","token","parseJwt","sub","verifyLogin","loggedIn","currentUser","currentUserValue","atob","split","e","a","cookies","Cookies","response","console","log","decodedJwt","exp","Date","now","removeItem","username","cookieValue","get","key","params","axios","post","headers","then","data","catch","err","password","refresh_token_data","roles","put","avatar","set","path","maxAge","secure","getAll","remove","getNameSvc","getImgSvc","history","push","LoginForm","props","resetUser","setState","email","userChange","event","target","onKeyDown","handleSubmit","state","show","loginFail","bind","auth","this","promise","strBase64File","Card","className","Form","onReset","id","Header","Body","Group","as","Col","controlId","Label","Control","required","autoComplete","type","onChange","placeholder","Footer","style","Alert","Button","size","variant","onClick","icon","faSave","Component","CustomAvatarEditor","React","setEditorRef","editor","handleScale","scale","parseFloat","onCrop","showModal","showImagePickerModal","allowZoomOut","showImagePicker","closeImagePicker","saveImage","success","img","getImageScaledToCanvas","toDataURL","imageSaved","modalClose","borderRadius","imageUrl","Container","Row","md","Modal","marginLeft","maxWidth","onHide","centered","marginTop","ref","width","height","border","color","min","max","step","defaultValue","extensions","dims","minWidth","minHeight","maxHeight","base64","onError","errMsg","marginBottom","class","RegistrationForm","initialState","fullname","password_confirmation","registrationSuccess","errors","resetErrors","createNewUser","newUser","pathname","handleChange","message","onClose","nextProps","preventDefault","confirmPassword","error","onSubmit","isInvalid","Feedback","faUndo","UserModal","isLoggedIn","displayLogin","handleClose","subscribe","getCurrentUserValue","closeButton","Title","AppNavbar","isOpen","displayDropdown","toggle","loginLinkName","isDlgOpen","subscriptionLogOut","subscriptionProfileDropdown","subscriptionImageSet","unsubscribe","Navbar","expand","NavbarBrand","fontSize","fontFamily","Nav","marginRight","round","src","Dropdown","Toggle","Menu","Item","to","Landing","onCloseDlg","openLoginDlg","openRegisterDlg","position","bottom","outline","Home","backgroundImage","background","backgroundSize","authHeader","PostList","posts","delete","updatePosts","isLoading","postList","map","body","stateToHTML","convertFromRaw","d","modifiedAt","date","toLocaleDateString","month","moment","format","title","renderHTML","Pagination","currentPage","itemsPerPage","itemCount","totalPages","getCurrentStartIndex","getCurrentEndIndex","goToNextPage","goToPrevPage","setItemCount","setTotalPages","Math","ceil","Posts","subscriptionRole","updatePagination","result","res","sort","b","length","getCurrentPage","slice","currRole","roleName","prevButtonDisabled","isFirstPage","nextButtonDisabled","isLastPage","fluid","disabled","faArrowLeft","faArrowRight","RichTextEditor","setDomEditorRef","domEditor","handleKeyCommand","editorState","focus","command","newState","RichUtils","cursor","ProfileEdit","onChangeRichTextEditor","newEditorState","avatarEditorImage","postImage","profile","heading","EditorState","createEmpty","updateEditor","contentLoaded","initialFormState","submitDisabled","displayAvatarEditor","closeAvatarEditor","postImagetoImgBB","postImageToImgBB","getBase64Image","imgUrl","updatedClient","profileHeading","profileInfo","convertToRaw","getCurrentContent","requestBody","getImageSvc","client","createWithContent","getClient","originalName","originalHeading","originalBody","replace","form","FormData","append","url","iconUrl","checkFormState","for","tag","Link","Profile","useState","setIsLoading","getLogin","resolved","RegistrationSuccess","location","undefined","openDlg","PostEdit","emptyItem","item","ContentState","createFromText","fetch","method","CommentBox","onExpand","isExpanded","outerHeight","document","scrollHeight","commentValue","handleCommentValue","submitCommentLine","enterCommentLine","cn","expanded","collapsed","modified","alt","htmlFor","onFocus","CommentList","commentListSorted","commentCount","upVotes","downVotes","isUpVotingDisabled","isDownVotingDisabled","commentList","votes","upVoteCount","downVoteCount","forEach","vote","voteType","comments","incrementDownVote","incrementUpVote","upVoteDisabled","downVoteDisabled","icons","removeComment","count","currentUsername","createdAt","val","dateStr","posterUsername","tallyVotes","commentText","ListGroup","posterName","commentName","alignItems","faArrowAltCircleUp","FormLabel","faArrowAltCircleDown","refreshCommentList","commentCounter","PostView","setCommentLine","charCode","onCommentClose","currentCount","usersVoted","updateUserVoted","getPostAndComments","pop","usernameSet","Set","comment","Object","keys","add","usernameArr","Array","from","index","imageData","postId","commentId","updateCommentsWithVote","setCommentWithVotes","updatedComments","vote_pushed","tmp_vote","com","submitComment","savedComment","findIndex","splice","match","newComment","setComment","updatedComment","currComments","commentIndex","bodyHTML","PrivateRoute","comp","rest","render","CustomRoute","InnerApp","exact","PureComponent","App","existingTokens","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4fe2c4ca.chunk.js","sourcesContent":["//src/history.js\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n\r\n\r\n","import {BehaviorSubject} from 'rxjs';\r\nconst currentNameSubject = new BehaviorSubject();\r\nconst currentRoleSubject = new BehaviorSubject();\r\n\r\nexport const getNameService = {\r\n    setName,\r\n    currentName: currentNameSubject.asObservable(),\r\n    get currentNameValue() {\r\n        var name = localStorage.getItem(\"name\");\r\n        if(name) return name;\r\n        else return currentNameSubject.value;\r\n    },\r\n    setRole,\r\n    currentRole: currentRoleSubject.asObservable(),\r\n    get currentRoleValue() {\r\n        var role = localStorage.getItem(\"role\");\r\n        if(role) return JSON.parse(role);\r\n        else return currentRoleSubject.value;\r\n    }\r\n}\r\n\r\nfunction setRole(role) {\r\n    currentRoleSubject.next(role);\r\n    localStorage.setItem(\"role\", JSON.stringify(role));\r\n}\r\nfunction setName(name) {\r\n    currentNameSubject.next(name);\r\n    localStorage.setItem(\"name\", name)\r\n}","import {BehaviorSubject} from 'rxjs';\r\nconst currentImageSubject = new BehaviorSubject();\r\n\r\nexport const getImageService = {\r\n    setImage,\r\n    currentImage: currentImageSubject.asObservable(),\r\n    get currentImageValue() {\r\n        var image = localStorage.getItem(\"dataUrl\");\r\n        if(image) return JSON.parse(image);\r\n        else return currentImageSubject.value;\r\n    }\r\n}\r\n\r\nfunction setImage(image) {\r\n    currentImageSubject.next(image);\r\n    localStorage.setItem(\"dataUrl\", JSON.stringify(image));\r\n}\r\n","import {BehaviorSubject} from \"rxjs\"\r\nimport axios from 'axios';\r\nimport history from '../Components/history'\r\nimport Cookies from 'universal-cookie';\r\nimport {getNameService as getNameSvc} from './getNameService';\r\nimport {getImageService as getImgSvc} from './getImageService';\r\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n//const loggedIn = new BehaviorSubject(false);\r\n\r\nexport const authenticationService = {\r\n    login,\r\n    logout,\r\n    getUsernameFromJWT,\r\n    verifyLogin,\r\n    loggedIn: localStorage.getItem('currentUser') ? true: false,\r\n    currentUser: currentUserSubject.asObservable(),\r\n    get currentUserValue() { return currentUserSubject.value}\r\n}\r\n\r\nconst parseJwt = (token) => {\r\n  try {\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction getUsernameFromJWT() {\r\n    const user = JSON.parse(localStorage.getItem('currentUser')).token;\r\n    return parseJwt(user).sub;\r\n}\r\n\r\nasync function verifyLogin() {\r\n\r\n      const cookies = new Cookies();\r\n      const user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n      var response = null;\r\n      //console.log(user);\r\n      console.log(\"verifyLogin\", user);\r\n      if (user) {\r\n        const decodedJwt = parseJwt(user.token);\r\n        console.log(\"Decoded JWT\", decodedJwt);\r\n        if (decodedJwt.exp * 1000 < Date.now()) {\r\n          localStorage.removeItem('currentUser');\r\n          const username = decodedJwt.sub;\r\n          const cookieValue = cookies.get(\"refresh_token\").key;\r\n\r\n          let params = {\r\n            username,\r\n            cookieValue\r\n          };\r\n          console.log(\"JWT expired, create new JWT using refresh token\", params);\r\n          await axios.post(\"/auth/refresh_token/update\", params,\r\n            {\r\n                headers: { \"Content-Type\": \"application/json\"\r\n                }\r\n          })\r\n          .then(response => {\r\n            localStorage.setItem('currentUser', JSON.stringify(response.data));\r\n            currentUserSubject.next(JSON.parse(localStorage.getItem('currentUser')));\r\n            console.log(\"jwt refreshed\", response.data);\r\n            return response;\r\n          }).catch(err=> {\r\n            logout();\r\n          })\r\n\r\n     }\r\n\r\n    }\r\n    response = \"DONE\"\r\n    return response;\r\n}\r\n\r\nasync function login(username, password) {\r\n    const cookies = new Cookies();\r\n    var refresh_token_data = \"\";\r\n    var name = \"\";\r\n    var roles = \"\";\r\n    var image = \"\";\r\n//    console.log(JSON.stringify({username, password}));\r\n//    const requestOptions = {\r\n//        method: 'PUT',\r\n//        credentials: 'include',\r\n//        headers: {\r\n//\r\n//                    'Content-Type': 'application/json',\r\n//                    'Accept': 'application/json'\r\n//        },\r\n//        redirect: 'follow',\r\n//        body: JSON.stringify({ username, password })\r\n//    };\r\n    await axios.put('/auth/login', {username, password})\r\n    .then(response => {\r\n        console.log(response.data);\r\n        localStorage.setItem('currentUser', JSON.stringify(response.data));\r\n        name = response.data.username;\r\n        roles = response.data.roles;\r\n        image = response.data.avatar;\r\n        authenticationService.loggedIn = true;\r\n        currentUserSubject.next(JSON.parse(localStorage.getItem('currentUser')));\r\n        console.log(\"loggedIn\", authenticationService.loggedIn)\r\n    }).catch(err => { console.log(err)\r\n        authenticationService.loggedIn = false;\r\n    });\r\n\r\n    if(authenticationService.loggedIn === true) {\r\n        //console.log(username)\r\n        await axios.post(\"/auth/refresh_token/generate\", username,\r\n        {\r\n            headers: { \"Content-Type\": \"text/plain\"},\r\n\r\n        }).then(response => {\r\n           console.log(response.data);\r\n           refresh_token_data = response.data;\r\n\r\n        })\r\n    }\r\n    if(refresh_token_data) {\r\n        console.log(\"SetCookie refresh_token\", refresh_token_data);\r\n\r\n        cookies.set(refresh_token_data.name, {\r\n            key: refresh_token_data.value},\r\n            {path: '/',\r\n             maxAge: refresh_token_data.maxAge,\r\n             secure: refresh_token_data.secure});\r\n        console.log(cookies.getAll());\r\n    }\r\n\r\n    console.log(\"AuthenticationService Login\", image);\r\n    return {name, roles, image};\r\n\r\n}\r\n\r\nfunction logout() {\r\n    const cookies = new Cookies();\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    cookies.remove('refresh_token', {path: '/'})\r\n    authenticationService.loggedIn = false;\r\n    getNameSvc.setName(\"\");\r\n    getNameSvc.setRole(\"\");\r\n    getImgSvc.setImage(\"\");\r\n    currentUserSubject.next(null);\r\n    localStorage.removeItem(\"role\");\r\n    localStorage.removeItem(\"name\");\r\n    localStorage.removeItem(\"dataUrl\");\r\n    history.push('/');\r\n}\r\n","import React, { Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import Input from '../Input'\r\nimport {Card,Form,Button,Col, Alert} from \"react-bootstrap\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSave,faPlusSquare,faUndo} from \"@fortawesome/free-solid-svg-icons\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getImageService as getImgSvc} from '../services/getImageService'\r\nimport history from '../Components/history';\r\nimport Cookies from 'universal-cookie';\r\nimport {getNameService as getNameSvc} from '../services/getNameService'\r\nexport default class LoginForm extends Component {\r\n\r\n    //...\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {email: \"\", password: \"\", show: false, loginFail: false}\r\n\r\n\r\n//        if(props.error) {\r\n//            this.state = {\r\n//              failure: 'wrong username or password!',\r\n//              errcount: 0\r\n//            }\r\n//        } else {\r\n//            this.state = { errcount: 0 }\r\n//        }\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    resetUser=() => {\r\n    this.setState({email: \"\", password: \"\"});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        var image = \"\";\r\n        const promise = await auth.login(this.state.email, this.state.password)\r\n        console.log(\"Loginform\", auth.loggedIn);\r\n        console.log(promise);\r\n        if(auth.loggedIn) {\r\n            getNameSvc.setName(promise.name);\r\n            getNameSvc.setRole(promise.roles[0]);\r\n            if(promise.image) getImgSvc.setImage(promise.image.strBase64File)\r\n\r\n            this.setState({loginFail: false});;\r\n            history.push('/posts');\r\n        }\r\n        else {\r\n            this.setState({password: \"\", loginFail: true});\r\n        }\r\n    }\r\n\r\n\r\n//    handleError = (field, errmsg) => {\r\n//        if(!field) return\r\n//\r\n//        if(errmsg) {\r\n//            this.setState((prevState) => ({\r\n//                failure: '',\r\n//                errcount: prevState.errcount + 1,\r\n//                errmsgs: {...prevState.errmsgs, [field]: errmsg}\r\n//            }))\r\n//        } else {\r\n//            this.setState((prevState) => ({\r\n//                failure: '',\r\n//                errcount: prevState.errcount===1? 0 : prevState.errcount-1,\r\n//                errmsgs: {...prevState.errmsgs, [field]: ''}\r\n//            }))\r\n//        }\r\n//    }\r\n\r\n    userChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    };\r\n\r\n    onKeyDown = (event) => {\r\n        if(event.key === 'Enter') this.handleSubmit();\r\n\r\n    }\r\n//    renderError = () => {\r\n//        if(this.state.errcount || this.state.failure) {\r\n//            const errmsg = this.state.failure\r\n//              || Object.values(this.state.errmsgs).find(v=>v)\r\n//            return <div className=\"error\">{errmsg}</div>\r\n//        }\r\n//    }\r\n    render() {\r\n        const {email, password} = this.state;\r\n        return(\r\n            <div>\r\n            <Card className={\"border border-dark bg-dark text-white\"}>\r\n                <Form onReset={this.resetUser} id=\"userFormId\">\r\n                <Card.Header>\r\n\r\n                </Card.Header>\r\n                <Card.Body>\r\n\r\n\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridemail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.userChange}\r\n                onKeyDown={this.onKeyDown}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Email\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={this.userChange}\r\n                onKeyDown={this.onKeyDown}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Password\" />\r\n                </Form.Group>\r\n\r\n                <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                {this.state.loginFail ? <Alert key='danger'> Invalid Credentials </Alert> : <div/>}\r\n                <Button size=\"sm\" variant=\"primary\" onClick={this.handleSubmit}>\r\n                <FontAwesomeIcon icon={faSave} />Submit\r\n                </Button>{\" \"}\r\n                </Card.Footer>\r\n                </Card.Body>\r\n                </Form>\r\n            </Card>\r\n            </div>\r\n    \t);\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  name: PropTypes.string,\r\n  action: PropTypes.string,\r\n  method: PropTypes.string,\r\n  inputs: PropTypes.array,\r\n  error: PropTypes.string\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Modal} from \"react-bootstrap\";\r\nexport default class MyToast extends Component{\r\n\r\nrender(){\r\n\r\n    return(\r\n    <div>\r\n    <Modal show={this.props.children.show}>\r\n    <Modal.Header className={\"bg-success text-white\"} closeButton={true}>\r\n    <strong className=\"mr-auto\">Registration Successful</strong>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n    {this.props.children.message}\r\n    </Modal.Body>\r\n    </Modal>\r\n    </div>\r\n    )\r\n}}","import React, {Component, useState} from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport {ImagePicker} from 'react-file-picker'\r\nimport {Container, CloseButton, Button, Modal, Row, Col } from \"react-bootstrap\"\r\nimport ModalDialog from 'react-bootstrap/ModalDialog';\r\nimport Draggable from 'react-draggable'\r\nimport \"../Styles/AvatarEditor.scss\"\r\n\r\nclass DraggableModalDialog extends React.Component {\r\n\trender() {\r\n\t\treturn <Draggable handle=\".modal-title\"><ModalDialog {...this.props} /></Draggable>\r\n\t}\r\n}\r\n\r\n\r\nclass CustomAvatarEditor extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        image: \"\",\r\n        showModal: false,\r\n        showImagePickerModal: true,\r\n        allowZoomOut: false,\r\n        scale: 1\r\n    }\r\n    this.showImagePicker = this.showImagePicker.bind(this);\r\n    this.closeImagePicker = this.closeImagePicker.bind(this);\r\n    this.saveImage = this.saveImage.bind(this);\r\n  }\r\n\r\n\r\n  setEditorRef = (editor) => (this.editor = editor)\r\n  showImagePicker() {\r\n      this.setState({showImagePickerModal: true});\r\n  }\r\n\r\n  handleScale = (e) => {\r\n    const scale = parseFloat(e.target.value)\r\n    this.setState({ scale })\r\n  }\r\n\r\n  onCrop = () => {\r\n\r\n  }\r\n  closeImagePicker(success) {\r\n\r\n    this.setState({showImagePickerModal: false})\r\n    if(success) this.props.setImage(this.state.image);\r\n  }\r\n\r\n  saveImage() {\r\n    const img = this.editor.getImageScaledToCanvas().toDataURL();\r\n    this.props.imageSaved(img);\r\n    this.props.modalClose();\r\n  }\r\n  render() {\r\n\r\n    const imageUrl = this.props.image;\r\n    const showModal= this.props.showModal;\r\n    const modalClose = this.props.modalClose;\r\n    const setImage = this.props.setImage;\r\n    var borderRadius\r\n\r\n    if(imageUrl) borderRadius = 125;\r\n    else borderRadius = 0;\r\n    //console.log(\"Avatar Editor render\", imageUrl, showModal, modalClose);\r\n    return (\r\n       <div>\r\n       <Container>\r\n         <Row className=\"justify-content-md-center\">\r\n            <Col md=\"auto\">\r\n                <Modal\r\n                    style={{\r\n                        marginLeft: \"150px\",\r\n                        maxWidth: \"300px\"}}\r\n                    show={showModal} onHide={modalClose}\r\n                    centered>\r\n                    <Container className=\"justify-content-md-center gradientContainer\">\r\n                        {imageUrl ?\r\n                            (\r\n                                <div>\r\n                                <Row style={{marginTop: \"10px\"}}\r\n                                    className=\"justify-content-md-center\">\r\n                                    <Col md=\"auto\">\r\n                                        <AvatarEditor\r\n                                            ref={this.setEditorRef}\r\n                                            image={imageUrl}\r\n                                            width={250}\r\n                                            height={250}\r\n                                            border={2}\r\n                                            scale={this.state.scale}\r\n                                            borderRadius={borderRadius}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <br/>\r\n                                        <h1 style={{color: \"white\"}}><b>Zoom</b>:</h1>\r\n                                        <input\r\n                                          name=\"scale\"\r\n                                          type=\"range\"\r\n                                          onChange={this.handleScale}\r\n                                          min={this.state.allowZoomOut ? '0.1' : '1'}\r\n                                          max=\"2\"\r\n                                          step=\"0.01\"\r\n                                          defaultValue=\"1\"\r\n                                        />\r\n\r\n\r\n                                </Row>\r\n                                </div>\r\n                            )\r\n                        : <div/> }\r\n                        <Row className=\"justify-content-md-center\">\r\n                            <Col md=\"auto\">\r\n\r\n                                 <ImagePicker\r\n                                 extensions={['jpg', 'jpeg', 'png']}\r\n                                 dims={{minWidth: 100, maxWidth: 500, minHeight: 100, maxHeight: 500}}\r\n                                 onChange={base64 => {\r\n                                     console.log(\"Image chosen:\", base64);\r\n                                     this.state.image =  base64\r\n                                     this.closeImagePicker(true);\r\n                                     }\r\n                                 }\r\n                                 onError={errMsg => {\r\n                                     console.log(\"Image error:\", errMsg);\r\n                                     this.state.image = \"\"\r\n                                     this.closeImagePicker(false);\r\n                                     }\r\n                                 }\r\n                                 >\r\n\r\n                                 <Button\r\n                                    color=\"secondary\">\r\n                                   Choose Image\r\n                                 </Button>\r\n                                 </ImagePicker>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"justify-content-md-center\"\r\n                            style={{marginTop : \"10px\", marginBottom: \"5px\"}}>\r\n                            <Col md=\"auto\">\r\n                            {imageUrl ?\r\n                                <Button class=\"secondary\" onClick={this.saveImage}>\r\n                                    Save Image\r\n                                </Button>\r\n                                : <div/>\r\n                            }\r\n                            </Col>\r\n                         </Row>\r\n                         <Row >\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </Modal>\r\n            </Col>\r\n         </Row>\r\n\r\n\r\n\r\n      </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CustomAvatarEditor","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../Styles/App.scss'\r\nimport axios from \"axios\";\r\n//import { GET_ERRORS } from \"./types\";\r\nimport {Container, Card,Form,Button,Col,Modal} from \"react-bootstrap\"\r\n                            import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n                            import {faSave,faPlusSquare,faUndo} from \"@fortawesome/free-solid-svg-icons\"\r\nimport MyToast from '../Components/MyToast'\r\nimport {Link} from \"react-router-dom\"\r\nimport history from '../Components/history';\r\nimport CustomAvatarEditor from '../Components/CustomAvatarEditor';\r\nimport {ImagePicker} from 'react-file-picker';\r\n\r\nexport default class RegistrationForm extends Component {\r\n\r\n    //...\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.show = false;\r\n        this.message = \"\";\r\n        const {onClose} = props;\r\n//        if(props.error) {\r\n//            this.state = {\r\n//              failure: 'wrong username or password!',\r\n//              errcount: 0\r\n//            }\r\n//        } else {\r\n//            this.state = { errcount: 0 }\r\n//        }\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n          this.handleChange = this.handleChange.bind(this);\r\n\r\n\r\n    }\r\n    initialState = {\r\n        fullname:\"\",\r\n        email:\"\",\r\n        password:\"\",\r\n        password_confirmation:\"\",\r\n        registrationSuccess:false,\r\n        errors:{}\r\n\r\n    }\r\n    resetUser=() => {\r\n    this.setState(() => this.initialState)\r\n    }\r\n    resetErrors=() => {\r\n        this.setState({errors: {}})\r\n    }\r\n    createNewUser = (newUser) => {\r\n        axios.post(\"/auth/register\", newUser)\r\n        .then(response => {\r\n\r\n            history.push({\r\n                pathname: '/registration',\r\n                state: this.state.email\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Caught error\", err);\r\n        });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      if (nextProps.errors) {\r\n        this.setState({ errors: nextProps.errors });\r\n      }\r\n    }\r\n    handleSubmit(event) {\r\n        const image = this.state.image;\r\n        event.preventDefault();\r\n        console.log(image);\r\n        if(image === \"\") return;\r\n        try{\r\n            const user= {\r\n                id: null,\r\n                name: this.state.fullname,\r\n                username: this.state.email,\r\n                password: this.state.password,\r\n                confirmPassword: this.state.password_confirmation\r\n            };\r\n            this.resetErrors();\r\n            this.createNewUser(user);\r\n\r\n            //console.log(\"Form submitted?\");\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    redirectToLogin() {\r\n\r\n    }\r\n    userChange =event =>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const {fullname,\r\n            email,\r\n            password,\r\n            password_confirmation,\r\n            registrationSuccess,\r\n            errors\r\n        } = this.state;\r\n\r\n        return(\r\n            <div>\r\n            <Card className={\"border border-dark bg-dark text-white\"}>\r\n                <Form onReset={this.resetUser} onSubmit={this.handleSubmit} id=\"userFormId\">\r\n                <Card.Body>\r\n                <Form.Group as= {Col} controlId=\"formGridName\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"text\"\r\n                name=\"fullname\"\r\n                value={fullname}\r\n                onChange={this.userChange}\r\n                className={\"bg-light\"}\r\n                isInvalid={!!errors.fullname}\r\n                placeholder=\"Enter Full Name\" />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.fullname}\r\n                </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridemail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.userChange}\r\n                isInvalid={!!errors.username}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Email (Username)\" />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.username}\r\n                </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={this.userChange}\r\n                isInvalid={!!errors.password}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Enter Password\" />\r\n                 <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.password}\r\n                </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as= {Col} controlId=\"formGridpassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required autoComplete=\"off\"\r\n                type=\"password\"\r\n                name=\"password_confirmation\"\r\n                value={password_confirmation}\r\n                onChange={this.userChange}\r\n                isInvalid={!!errors.confirmPassword}\r\n                className={\"bg-light\"}\r\n                placeholder=\"Re-enter Password\" />\r\n               <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.confirmPassword}\r\n                </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Card.Footer style={{\"textAlign\":\"center\"}}>\r\n                <Container class=\"fluid\">\r\n                    <div class=\"row\">\r\n                        <div class=\"btn-group-sm btn-group-horizontal\">\r\n                        <Button size=\"sm\" variant=\"primary\" class=\"customWidth\" type=\"submit\">\r\n\r\n                        <FontAwesomeIcon icon={faSave} />Submit\r\n                        </Button>{\" \"}\r\n                        <Button size=\"sm\" variant=\"primary\" class=\"customWidth\" type=\"reset\">\r\n                        <FontAwesomeIcon icon={faUndo} />Reset\r\n                        </Button>\r\n                        </div>\r\n                    </div>\r\n                </Container>\r\n                </Card.Footer>\r\n                </Card.Body>\r\n                </Form>\r\n            </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n//RegistrationForm.propTypes = {\r\n//  //createNewUser: PropTypes.func.isRequired,\r\n//  errors: PropTypes.object.isRequired\r\n//};\r\n\r\nconst mapStateToProps = state => ({\r\n  errors: state.errors\r\n});\r\n\r\n","import React, { Component, useState } from 'react'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport LoginForm from '../auth/LoginForm'\r\nimport RegistrationForm from '../auth/RegistrationForm'\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport { Link } from 'react-router-dom';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {FaSignInAlt, FaPlusSquare } from \"react-icons/fa\";\r\nimport '../Styles/UserModal.scss';\r\n\r\nexport default class UserModal extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isLoggedIn = false;\r\n        this.displayLogin = true;\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n\r\n    handleClose() {\r\n        this.setState({});\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        auth.currentUser.subscribe(user => {\r\n            //no jwt in local storage, user not logged in\r\n            if(user && user.getCurrentUserValue !== null) {\r\n                this.isLoggedIn = true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let {show, displayLogin, onHide} = this.props;\r\n        const loginToggle = this.state;\r\n\r\n        return(\r\n        <Modal show={show} onHide={onHide}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>{displayLogin ?\r\n                        <div> <FaSignInAlt/> SignIn </div>\r\n                        : <div> <FaPlusSquare /> Register </div>}\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {displayLogin ? <LoginForm/> :\r\n                    <RegistrationForm/>}\r\n                </Modal.Body>\r\n\r\n        </Modal> );\r\n    }\r\n\r\n\r\n}","import React, {Component, useState} from 'react';\r\nimport {Dropdown, Navbar, NavbarBrand, Nav, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {authenticationService} from '../services/authenticationService';\r\nimport {getNameService as getNameSvc} from '../services/getNameService';\r\nimport {getImageService as getImgSvc} from '../services/getImageService';\r\nimport UserModal from './UserModal';\r\nimport {Subject} from 'rxjs';\r\nimport Avatar from 'react-avatar'\r\nimport history from './history';\r\nimport '../Styles/App.scss';\r\n\r\nexport default class AppNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false,\r\n            displayLogin: true,\r\n            displayDropdown: false,\r\n            name: \"\",\r\n            avatar: \"\"\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.loginLinkName = \"Login\"\r\n\r\n        this.isDlgOpen = false;\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        //console.log(authenticationService.loggedIn);\r\n        this.subscriptionLogOut = authenticationService.currentUser.subscribe(user => {\r\n            console.log(\"Logout?\", user);\r\n            if(user === null) this.setState({name:\"\", displayDropdown: false})\r\n        })\r\n        this.subscriptionProfileDropdown = getNameSvc.currentName.subscribe(name => {\r\n            console.log(\"checking profile dropdown name\", name);\r\n            //upon page refresh update the name field to the current user's name\r\n            if(name === \"undefined\" || !name) {\r\n                name = getNameSvc.currentNameValue;\r\n            }\r\n            if(name) {\r\n             console.log(\"currentName Observable Triggered\", name);\r\n\r\n             this.setState({name: name, displayDropdown: true});\r\n            }\r\n\r\n\r\n        })\r\n\r\n        this.subscriptionImageSet = getImgSvc.currentImage.subscribe(image => {\r\n            if(authenticationService.loggedIn === true)\r\n            {\r\n\r\n                if(image === \"undefined\" || !image) {\r\n\r\n                image = getImgSvc.currentImageValue;\r\n                //console.log(\"Image observable subscription triggered\", image);\r\n                }\r\n                this.setState({avatar: image})\r\n            }\r\n\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.subscriptionProfileDropdown.unsubscribe();\r\n        this.subscriptionImageSet.unsubscribe();\r\n        this.subscriptionLogOut.unsubscribe();\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        authenticationService.logout();\r\n        history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const NavbarBrandStyle = {\r\n            fontSize: \"50px\",\r\n            fontFamily: \"Arial\"\r\n        }\r\n        const name = this.state.name;\r\n        const avatar = this.state.avatar;\r\n\r\n        return (\r\n\r\n            <Navbar color=\"light\" expand=\"md\" class=\"px-2\">\r\n                <NavbarBrand style={NavbarBrandStyle}>\r\n                    ReactApp\r\n                </NavbarBrand>\r\n            {name ? (\r\n                <Nav className=\"ms-auto\" style={{marginRight: \"20px\"}}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col style={{marginRight: \"10px\"}}  >\r\n                                {avatar ? (\r\n\r\n                                        <Avatar round ={true}\r\n                                            size=\"40\"\r\n                                            name={name}\r\n                                            src={avatar}/>\r\n                                        ): (\r\n                                        name ? (\r\n                                            <Avatar size=\"40\"\r\n                                                round={true}\r\n                                                name={name}/>\r\n                                            ) : <div/>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col>\r\n                                {this.state.displayDropdown ? (\r\n                                    <Dropdown class=\"px-20\">\r\n\r\n                                        <Dropdown.Toggle variant=\"success\"> Welcome, {name} </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                        <Dropdown.Item>\r\n                                            <Link to=\"/posts\">View Posts</Link>\r\n                                        </Dropdown.Item>\r\n                                        <Dropdown.Item>\r\n                                            <Link to=\"/profile\">View/Edit Profile</Link>\r\n                                        </Dropdown.Item>\r\n                                        <Dropdown.Item>Contact Us</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={this.logout}>Logout</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown> )\r\n                                    : <div/>\r\n\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Nav>\r\n                ) : ( <div/> )\r\n            }\r\n        </Navbar>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, {useState, Component} from 'react'\r\nimport {Button, Container, Row, Col} from 'react-bootstrap';\r\nimport '../Styles/UserModal.scss';\r\nimport UserModal from './UserModal';\r\n\r\n\r\nexport default class Landing extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: false, displayLogin: false};\r\n        this.openLoginDlg = this.openLoginDlg.bind(this);\r\n        this.openRegisterDlg = this.openRegisterDlg.bind(this);\r\n        this.onCloseDlg = this.onCloseDlg.bind(this);\r\n    }\r\n\r\n    openLoginDlg(){\r\n        this.setState({show: true, displayLogin: true});\r\n    }\r\n\r\n    openRegisterDlg(){\r\n        this.setState({show: true, displayLogin: false});\r\n    }\r\n\r\n    onCloseDlg =() => {\r\n        this.setState({show:false})\r\n    }\r\n    render() {\r\n        const {show, displayLogin} = this.state;\r\n        console.log(\"Landing Component\", show, displayLogin);\r\n        return(\r\n\r\n            <div>\r\n\r\n                <UserModal show={show} displayLogin={displayLogin} onHide={this.onCloseDlg}/>\r\n                <Col style={{position: \"absolute\", bottom: \"0\"}}>\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                        <Button className=\"btn-primary\"\r\n                            onClick={this.openLoginDlg}>\r\n                            Login\r\n                        </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                        <Button className={\"link-style btn-secondary\"}\r\n                            style={{outline: \"none\"}}\r\n                            onClick={this.openRegisterDlg}>\r\n                            Don't have an account? Register Here..\r\n                        </Button>\r\n                        </Col>\r\n                     </Row>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/alpinelake_bg.d1f3d6dc.jpg\";","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport Landing from '../Components/Landing';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {guest} from '../Roles/Guest';\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport background from './../images/alpinelake_bg.jpg';\r\nconst Home = () => {\r\n\r\n\r\n        return (\r\n            <div>\r\n            <div className={\"p5 mb-4 rounded-3\"}\r\n                style={{ backgroundImage: `url(${background})`,\r\n                backgroundSize: 'cover' }}>\r\n            <Container style={{position: \"relative\",\r\n                maxWidth: \"100vw\",\r\n                maxHeight: \"40vw\",\r\n                height: \"40vw\"}}>\r\n\r\n                    <Row className=\"text-center justify-content-center d-flex\">\r\n                        <h1 className={\"display-5\"}>Landing Page</h1>\r\n\r\n                    </Row>\r\n\r\n\r\n                    <Row className=\"items-align\">\r\n                      <Landing/>\r\n                    </Row>\r\n\r\n            </Container>\r\n            </div>\r\n            </div>\r\n        );\r\n}\r\nexport default Home;","import {authenticationService as auth} from '../services/authenticationService'\r\n\r\nexport function authHeader() {\r\n    // return authorization header with jwt token\r\n    const currentUser = auth.currentUserValue;\r\n    console.log(\"authHeader\", currentUser.token);\r\n    if (currentUser && currentUser.token) {\r\n            return `Bearer ${currentUser.token}`;\r\n    } else {\r\n        return {};\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {ContentState, convertFromRaw} from 'draft-js';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\nimport renderHTML from 'react-render-html';\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\nclass PostList extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {posts: []};\r\n        this.remove = this.remove.bind(this);\r\n\r\n    }\r\n\r\n\r\n    async remove(id) {\r\n//        console.log(id)\r\n        await axios.delete(`/api/posts/${id}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n        }).then((response) => {\r\n           this.props.updatePosts();\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const {isLoading} = this.state;\r\n        const posts = this.props.posts;\r\n        console.log(\"Posts\", posts);\r\n        const role = this.props.role;\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n\r\n\r\n        const postList = posts.map(post => {\r\n                    var body = stateToHTML(convertFromRaw(\r\n                            JSON.parse(post.body)));\r\n                    var options = { month: 'long'};\r\n\r\n                    var d = new Date( post.modifiedAt * 1000);\r\n                    var month = d.toLocaleDateString(\"en-US\", options);\r\n\r\n                    var date = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n                    return(\r\n                    <div>\r\n                    <article class=\"blog-post\">\r\n                        {role === \"ROLE_ADMIN\" ?\r\n                            <ButtonGroup>\r\n                                <Button size=\"sm\" color=\"primary\"> <Link to={{\r\n                                    pathname: \"posts/edit/\",\r\n                                    state: {params: {id: post.id}}\r\n                                    }}>\r\n                                        Edit\r\n                                    </Link>\r\n                                </Button>\r\n                                <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(post.id)}>Delete</Button>\r\n                            </ButtonGroup> :\r\n                            <div/>\r\n                        }\r\n                        <h2 class=\"blog-post-title\"><Link to={{\r\n                            pathname: \"posts/view/\",\r\n                            state: {params: {id: post.id}}\r\n                            }}>{post.title}</Link></h2>\r\n                        <p class=\"blog-post-meta\">{date}</p>\r\n                        <p>{renderHTML(body)}</p>\r\n                    </article>\r\n                    </div>\r\n                    );\r\n        });\r\n        console.log(postList);\r\n        return (\r\n            <div>\r\n            {postList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostList;","\r\nexport const Pagination = {\r\n    currentPage: 1,\r\n    itemsPerPage: 3,\r\n    itemCount: 0,\r\n    totalPages: 1,\r\n    getCurrentStartIndex,\r\n    getCurrentEndIndex,\r\n    goToNextPage,\r\n    goToPrevPage,\r\n    setItemCount,\r\n    setTotalPages\r\n\r\n}\r\nfunction setItemCount(itemCount) {\r\n    Pagination.itemCount = itemCount;\r\n}\r\nfunction setTotalPages() {\r\n    if(Pagination.itemCount === 0) Pagination.totalPages = 1;\r\n    else Pagination.totalPages = Math.ceil(Pagination.itemCount/ Pagination.itemsPerPage);\r\n}\r\nfunction getCurrentStartIndex() {\r\n    return Pagination.itemsPerPage * (Pagination.currentPage - 1)\r\n}\r\n\r\nfunction getCurrentEndIndex() {\r\n    return (Pagination.itemsPerPage * Pagination.currentPage) - 1\r\n}\r\n\r\nfunction goToNextPage() {\r\n    if(Pagination.currentPage < Pagination.totalPages) Pagination.currentPage++;\r\n}\r\n\r\nfunction goToPrevPage() {\r\n    if(Pagination.currentPage > 1) Pagination.currentPage--;\r\n}","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getNameService as getNameSvc} from '../services/getNameService'\r\nimport axios from 'axios';\r\nimport PostList from \"../Components/PostList\"\r\nimport Cookies from 'universal-cookie';\r\nimport {Pagination} from \"../helpers/Pagination\";\r\nimport {authHeader} from \"../helpers/auth-header\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowRight, faArrowLeft} from \"@fortawesome/free-solid-svg-icons\"\r\nclass Posts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {role: \"ROLE_GUEST\", posts: [], currentPage: []};\r\n        this.subscriptionRole = null;\r\n        this.goToNextPage = this.goToNextPage.bind(this);\r\n        this.goToPrevPage = this.goToPrevPage.bind(this);\r\n        this.updatePagination  = this.updatePagination.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.subscriptionRole = getNameSvc.currentRole.subscribe(role => {\r\n            if(role) {\r\n                console.log(\"Getting observable role\", role);\r\n                this.setState({role: role});\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const promise = auth.verifyLogin();\r\n        console.log(\"Posts componentDidMount\", promise);\r\n        if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) {\r\n                    console.log(\"Posts componentDidMount re-render\");\r\n                    this.setState({role: getNameSvc.currentRoleValue});\r\n                }\r\n            })\r\n        }\r\n\r\n        axios.get('api/posts', {\r\n            headers: {\r\n                'Authorization': authHeader()\r\n           }\r\n        }).then(\r\n            res => {\r\n                console.log(res.data);\r\n\r\n                //response.json();\r\n                const posts = res.data;\r\n                this.state.posts = posts;\r\n\r\n        }).then(\r\n            res => {\r\n            this.state.posts = this.state.posts.sort(function(a,b) {\r\n                return a.modifiedAt < b.modifiedAt ? 1 : -1;\r\n            });\r\n            Pagination.setItemCount(this.state.posts.length);\r\n            Pagination.setTotalPages();\r\n\r\n            console.log(Pagination.totalPages);\r\n\r\n            this.setState({currentPage: this.getCurrentPage()});\r\n        });\r\n    }\r\n\r\n    updatePagination() {\r\n        let posts = [];\r\n        axios.get('api/posts', {\r\n            headers: {\r\n                'Authorization': authHeader()\r\n           }\r\n        }).then(\r\n            res => {\r\n                console.log(res.data);\r\n\r\n                //response.json();\r\n                posts = res.data;\r\n\r\n        }).then(() => {\r\n            Pagination.setItemCount(posts.length);\r\n            Pagination.setTotalPages();\r\n            Pagination.currentPage = 1;\r\n            this.setState({posts: posts, currentPage: this.getCurrentPage()})\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        this.subscriptionRole.unsubscribe();\r\n    }\r\n\r\n    goToNextPage() {\r\n        Pagination.goToNextPage();\r\n        this.setState({currentPage: this.getCurrentPage()});\r\n    }\r\n\r\n    goToPrevPage() {\r\n        Pagination.goToPrevPage();\r\n        this.setState({currentPage: this.getCurrentPage()});\r\n    }\r\n\r\n    getCurrentPage() {\r\n            console.log(\"CurrentPage\", Pagination.currentPage);\r\n        return this.state.posts.slice(Pagination.getCurrentStartIndex(),\r\n                Pagination.getCurrentEndIndex() + 1);\r\n    }\r\n\r\n    isLastPage() {\r\n        if(Pagination.currentPage === Pagination.totalPages) return true;\r\n        else return false;\r\n    }\r\n\r\n    isFirstPage() {\r\n        if(Pagination.currentPage === 1) return true;\r\n        else return false;\r\n    }\r\n    render() {\r\n        const currRole = this.state.role.roleName;\r\n        const currentPage = this.state.currentPage;\r\n        const prevButtonDisabled = this.isFirstPage();\r\n        const nextButtonDisabled = this.isLastPage();\r\n//        console.log(currRole);\r\n        console.log(\"CurrentPage\", currentPage);\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row>\r\n                        {currRole === \"ROLE_ADMIN\" ?\r\n                            <div className=\"float-right\">\r\n                                <Button color=\"success\"><Link to={{\r\n                                    pathname: \"posts/edit/\",\r\n                                    state: {params: {id: \"new\"}}\r\n                                }}>Add Post\r\n                                </Link>\r\n                                </Button>\r\n                            </div>\r\n                            :\r\n                            <div/>\r\n                        }\r\n                        <h3>Posts</h3>\r\n                        <div className=\"col-md-8\">\r\n                            <PostList updatePosts={this.updatePagination} posts={currentPage} role={currRole}/>\r\n                        </div>\r\n                    </Row>\r\n                    {Pagination.totalPages !== 1 ?\r\n                        <Row>\r\n                            <Col>\r\n                                <Button color=\"primary\" disabled={prevButtonDisabled} onClick={this.goToPrevPage}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button color=\"primary\" disabled={nextButtonDisabled} onClick={this.goToNextPage}>\r\n                                    <FontAwesomeIcon icon={faArrowRight}/>\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    : <div/>}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Posts;","import React, {Component, useState} from 'react';\r\nimport {Editor, EditorState, ContentState, RichUtils} from 'draft-js';\r\nexport default class RichTextEditor extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.setDomEditorRef = ref => this.domEditor = ref;\r\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n      if(this.props.editorState && this.props.onChange) this.domEditor.focus()\r\n    }\r\n\r\n    handleKeyCommand(command, editorState) {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n          this.props.onChange(newState);\r\n          return 'handled';\r\n        }\r\n\r\n        return 'not-handled';\r\n    }\r\n    render() {\r\n        const {editorState, onChange} = this.props;\r\n        //console.log(onChange);\r\n        return (\r\n\r\n            <div\r\n              style={{ borderRadius: \"5px\", border: \"1px solid lightgrey\", minHeight: \"6em\", cursor: \"text\" }}\r\n            >\r\n              <Editor\r\n                ref={this.setDomEditorRef}\r\n                editorState={editorState}\r\n                handleKeyCommand={this.handleKeyCommand}\r\n                onChange={onChange}\r\n              />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {useState, Component} from 'react';\r\nimport axios from 'axios';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {Button, Container, Row, Col, Form, FormGroup, Input, Label} from 'reactstrap'\r\nimport {Link} from 'react-router-dom';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {getImageService as getImageSvc} from '../services/getImageService'\r\nimport { EditorState, ContentState, convertFromRaw, convertToRaw} from 'draft-js'\r\nimport RichTextEditor from '../Components/RichTextEditor'\r\nimport CustomAvatarEditor from '../Components/CustomAvatarEditor'\r\nimport Avatar from 'react-avatar'\r\nimport history from '../Components/history'\r\nimport \"../Styles/Profile.scss\"\r\nimport CryptoJS from \"crypto-js\"\r\nclass ProfileEdit extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.profile = {\r\n            username: \"\",\r\n            name: \"\",\r\n            heading: \"\",\r\n            body: \"\",\r\n            imageUrl: \"\"\r\n        }\r\n        this.state = {\r\n            id: \"\",\r\n            profile: this.profile,\r\n            image: \"\",\r\n            editorState: EditorState.createEmpty(),\r\n            showModal: false,\r\n            postImage: false,\r\n            updateEditor: false,\r\n            contentLoaded: false\r\n        }\r\n        this.initialFormState = {\r\n            name: \"\",\r\n            heading: \"\",\r\n            body: \"\",\r\n            imageUrl: \"\"\r\n        }\r\n        this.username = auth.getUsernameFromJWT();\r\n        this.submitDisabled = true;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.displayAvatarEditor = this.displayAvatarEditor.bind(this);\r\n        this.closeAvatarEditor = this.closeAvatarEditor.bind(this);\r\n        this.imageSaved = this.imageSaved.bind(this);\r\n        this.postImagetoImgBB = this.postImageToImgBB.bind(this);\r\n        this.getBase64Image = this.getBase64Image.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const promise = auth.verifyLogin();\r\n\r\n        if(promise) {\r\n            this.submitDisabled = true;\r\n            promise.then(result => {\r\n                if(localStorage.getItem('currentUser')) {\r\n\r\n\r\n                    const {id, profile, image, editorState, showModal, postImage} = this.state;\r\n                    const imgUrl = this.state.image\r\n                    console.log(\"submitting profile info\", this.state);\r\n                    if(imgUrl && postImage)\r\n                    {\r\n                        //console.log(\"ImgBB Post URL\", imgUrl);\r\n\r\n                        var updatedClient = {\r\n                            id: id,\r\n                            name: this.profile.name,\r\n                            profileHeading: this.profile.heading,\r\n                            profileInfo: null,\r\n                            avatar: {username: this.profile.username, strBase64File: imgUrl},\r\n                        }\r\n\r\n                        updatedClient.profileInfo =\r\n                            JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n                            //console.log(\"profile handleSubmit\", updatedClient);\r\n                            const requestBody = JSON.stringify(updatedClient)\r\n                            axios.put(`/api/clients/${updatedClient.id}`, requestBody, {\r\n\r\n                                headers: {\r\n                                    'Accept': 'application/json',\r\n                                    'Content-Type': 'application/json',\r\n                                    'Authorization': authHeader()\r\n                                }\r\n                            }).then(response => {\r\n                                getImageSvc.setImage(this.state.image);\r\n                                history.push('/posts');\r\n                            }).catch(err => console.log(err));\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        var updatedClient = {\r\n                            id: id,\r\n                            name: this.profile.name,\r\n                            profileHeading: this.profile.heading,\r\n                            profileInfo: null,\r\n                            avatar: null\r\n\r\n                        }\r\n                        updatedClient.profileInfo =\r\n                            JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n                        //console.log(\"profile handleSubmit\", updatedClient);\r\n                        const requestBody = JSON.stringify(updatedClient)\r\n                        axios.put(`/api/clients/${updatedClient.id}`, requestBody, {\r\n\r\n                            headers: {\r\n                                'Accept': 'application/json',\r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': authHeader()\r\n                            }\r\n                        }).then(response => {\r\n                            history.push('/posts');\r\n                        }).catch(err => console.log(err));\r\n                    }\r\n\r\n                }\r\n            })\r\n            this.setState({});\r\n        }\r\n\r\n    }\r\n    onChangeRichTextEditor = (newEditorState) =>{\r\n      this.setState({editorState: newEditorState});\r\n\r\n    }\r\n\r\n    async getClient() {\r\n        let client = \"\";\r\n\r\n        await axios.get(`/api/clients/getByUsername/${this.username}`, {\r\n            headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': authHeader()\r\n            }\r\n        }).then(response => {\r\n            //.log(\"ProfileEdit\", response.data);\r\n            client = response.data;\r\n        }).catch(err => {\r\n            console.log(\"ProfileEdit Error\", err);\r\n        })\r\n        this.initialFormState = {\r\n            name: client.name,\r\n            heading: client.profileHeading,\r\n            body: client.profileInfo\r\n        }\r\n        this.profile = {\r\n            username: client.username,\r\n            name: client.name,\r\n            heading: client.profileHeading,\r\n            body: client.profileInfo,\r\n        }\r\n        if(getImageSvc.currentImageValue === \"\") {\r\n            if(client.avatar) this.profile.imageUrl = client.avatar.strBase64File;\r\n            else this.profile.imageUrl = \"\";\r\n        }\r\n        else this.profile.imageUrl = getImageSvc.currentImageValue;\r\n\r\n        var editorState = this.state.editorState;\r\n        if(this.profile.body) {\r\n            //console.log(\"Profile\", this.profile);\r\n            editorState =\r\n                EditorState.createWithContent(convertFromRaw(\r\n                    JSON.parse(this.profile.body)\r\n                ));\r\n        }\r\n\r\n\r\n        this.setState({\r\n            id: client.id,\r\n            profile: this.profile,\r\n            editorState: editorState,\r\n            image: this.profile.imageUrl,\r\n            contentLoaded: true})\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(localStorage.getItem('currentUser')) {\r\n            this.getClient();\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n\r\n        const target = event.target;\r\n        //console.log(\"Target\", target);\r\n        const value = target.value;\r\n\r\n        const name = target.name;\r\n\r\n        let profile = this.profile;\r\n        profile[name] = value\r\n\r\n        this.setState({profile});\r\n    }\r\n\r\n    checkFormState() {\r\n        let name = \"\";\r\n        let heading = \"\";\r\n        let body = \"\";\r\n        let imageUrl = \"\";\r\n        let originalName = \"\";\r\n        let originalHeading = \"\";\r\n        let originalBody = \"\";\r\n        let originalUrl = \"\";\r\n        if(this.state.profile.name) {\r\n            name = this.state.profile.name;\r\n        }\r\n        if(this.state.profile.heading) {\r\n            heading = this.state.profile.heading;\r\n        }\r\n        if(this.state.profile.body)\r\n        {\r\n            body = JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n        }\r\n        if(this.state.profile.imageUrl)\r\n        {\r\n            imageUrl = this.state.profile.imageUrl;\r\n        }\r\n        if(this.initialFormState.name) {\r\n            originalName = this.initialFormState.name;\r\n        }\r\n        if(this.initialFormState.heading) {\r\n            originalHeading = this.initialFormState.heading;\r\n        }\r\n        if(this.initialFormState.body) {\r\n            originalBody = this.initialFormState.body;\r\n        }\r\n        if(this.initialFormState.imageUrl) {\r\n            originalUrl = this.initialFormState.imageUrl;\r\n        }\r\n\r\n        if(this.state.postImage) return false;\r\n        if(name === originalName\r\n            && heading === originalHeading\r\n            && body === originalBody)\r\n        {\r\n            //console.log(\"keep button disabled\")\r\n            return true;\r\n        }\r\n\r\n        else\r\n        {\r\n            //console.log(\"enable button\")\r\n            return false;\r\n        }\r\n    }\r\n\r\n    displayAvatarEditor() {\r\n        this.setState({showModal: true});\r\n    }\r\n\r\n    closeAvatarEditor() {\r\n\r\n        this.setState({showModal: false});\r\n\r\n    }\r\n\r\n    setImage = (avatarEditorImage) => {\r\n         this.setState({image: avatarEditorImage})\r\n\r\n    }\r\n\r\n    imageSaved = (avatarEditorImage) => {\r\n        this.setState({image: avatarEditorImage, postImage: true});\r\n    }\r\n\r\n\r\n    async postImageToImgBB(avatarEditorImage) {\r\n        const API_KEY = \"cfb81278dab11ed393283f39d4119f59\";\r\n        const API_URL = \"https://api.imgbb.com/1/upload\";\r\n        let image =\r\n            avatarEditorImage.replace(/^data:image\\/(png|jpg|jpeg|gif);base64,/, \"\")\r\n\r\n        var form = new FormData();\r\n        form.append('image', image)\r\n        await axios.post(API_URL, form, {\r\n            params: {\r\n                key: API_KEY\r\n                },\r\n    //\r\n    //           headers: {\r\n    //                'Accept': 'application/json',\r\n    //                'Access-Control-Allow-Origin': '*',\r\n    //                'Connection': 'keep-alive',\r\n    //                'Content-Type': 'application/json',\r\n    //            },\r\n\r\n            }).then(response => {\r\n                let res = response.data.data.url;\r\n                const profile = this.state.profile;\r\n                //console.log(\"Post to ImgBB Response\", res);\r\n                profile.imageUrl = res;\r\n                this.setState({profile: profile});\r\n            }).catch(err => console.log(err));\r\n\r\n        //console.log(\"Posting the following image\", image.substring(0,20));\r\n\r\n\r\n    }\r\n\r\n    async getBase64Image(id) {\r\n        await axios.get(`/api/clients/getById/${id}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n\r\n        }).then(response => {\r\n\r\n            return response.data.iconUrl;\r\n        });\r\n\r\n        // now do something with `dataUrl`\r\n\r\n    }\r\n\r\n    render() {\r\n        const {id, profile, image, editorState, showModal, postImage, contentLoaded} = this.state;\r\n//        if(id === null && localStorage.getItem(\"currentUser\")) {\r\n//            console.log(\"GETting client with new jwt\");\r\n//            this.getClient();\r\n//            return;\r\n//        }\r\n\r\n        console.log(\"ProfileEdit Render\", this.state);\r\n        this.submitDisabled = this.checkFormState();\r\n        //console.log(\"render\", this.state);\r\n\r\n\r\n        return(\r\n\r\n                <div>\r\n                {contentLoaded ?\r\n                    (\r\n                    <div>\r\n                        <CustomAvatarEditor\r\n                            image={image}\r\n                            showModal={showModal}\r\n                            modalClose={this.closeAvatarEditor}\r\n                            setImage={this.setImage}\r\n                            imageSaved={this.imageSaved}\r\n                        />\r\n                        <Container>\r\n                            <h1>Edit Profile</h1>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"name\"><strong>Name</strong></Label>\r\n                                    <Input style={{maxWidth: \"250px\"}}\r\n                                        type=\"text\" name=\"name\" id=\"name\" value={profile.name}\r\n                                           onChange={this.handleChange} autoComplete=\"name\"/>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"heading\"><strong>Heading</strong></Label>\r\n                                    <Input type=\"text\" name=\"heading\" id=\"heading\" value={profile.heading}\r\n                                           onChange={this.handleChange} autoComplete=\"heading\"/>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"body\"><strong>Profile Info</strong></Label>\r\n\r\n                                        <RichTextEditor\r\n                                            editorState={this.state.editorState}\r\n                                            onChange={this.onChangeRichTextEditor}/>\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Container>\r\n                                        <Row>\r\n                                            <Label for=\"Icon\"><strong>Profile Icon</strong></Label>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            {image ?\r\n                                                <Avatar round ={true}\r\n                                                    borderRadius=\"50\"\r\n                                                    size=\"100\"\r\n                                                    name={image}\r\n                                                    src={image}/>\r\n                                                :\r\n                                                <Avatar size=\"100\"\r\n                                                    round={true}\r\n                                                    name={profile.name}/>\r\n                                             }\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Button style={{marginTop: \"10px\", maxWidth: \"200px\"}}\r\n                                                color=\"primary\"\r\n                                                onClick={this.displayAvatarEditor}>\r\n                                                Choose Icon\r\n                                            </Button>\r\n\r\n                                         </Row>\r\n\r\n                                    </Container>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button disabled={this.submitDisabled} color=\"primary\" type=\"submit\">Update Profile</Button>{' '}\r\n                                    <Button color=\"secondary\" tag={Link} to=\"/posts\">Cancel</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Container>\r\n                    </div>  ) : <div/>  }\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ProfileEdit;","import React, { Component, useState } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport ProfileEdit from '../Components/ProfileEdit';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport {authenticationService as auth} from '../services/authenticationService'\r\nimport {guest} from '../Roles/Guest';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nasync function getLogin() {\r\n    return await auth.verifyLogin();\r\n}\r\nconst Profile = () => {\r\n        const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n        const promise = getLogin();\r\n        if(promise === \"DONE\") {\r\n            setIsLoading(false);\r\n        }\r\n        else if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                console.log(\"Promise resolved?\", resolved);\r\n                if(localStorage.getItem('currentUser')) setIsLoading(false);\r\n            });\r\n        }\r\n\r\n        if(!isLoading)\r\n        {\r\n            return (\r\n                <div>\r\n\r\n                <Container style={{position: \"relative\",\r\n                    maxWidth: \"100vw\",\r\n                    maxHeight: \"40vw\",\r\n                    height: \"40vw\"}}>\r\n\r\n                       <ProfileEdit/>\r\n\r\n                </Container>\r\n                </div>\r\n            );\r\n        }\r\n        else return (<div/>);\r\n}\r\nexport default Profile;","import React, { Component } from 'react';\r\nimport '../Styles/App.scss';\r\nimport AppNavbar from '../Components/AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\nimport {Card} from \"react-bootstrap\";\r\nimport history from '../Components/history';\r\n\r\nclass RegistrationSuccess extends Component {\r\n\r\n    openDlg() {\r\n        history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const { state } = this.props.location;\r\n        console.log(state);\r\n        if(state === undefined) {\r\n            history.push(\"/\");\r\n            return null;\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                <Container>\r\n                <div class = \"row\">\r\n                    <div class = \"col text-center\">\r\n                        Sign-up successful, please check email sent to <b>{state}</b> to finish registration process..\r\n                    </div>\r\n                </div>\r\n                <div class = \"row\">\r\n                    <div class = \"col text-center\">\r\n                        <Button className={\"btn-primary center\"} onClick={this.openDlg}> Proceed </Button>\r\n                    </div>\r\n                </div>\r\n                </Container>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default RegistrationSuccess;","import React, { Component, useState } from 'react';\r\nimport { Link} from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { EditorState, ContentState, convertFromRaw, convertToRaw} from 'draft-js'\r\nimport RichTextEditor from '../Components/RichTextEditor'\r\nimport AppNavbar from './AppNavbar';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport {authenticationService as auth} from '../services/authenticationService';\r\nimport axios from 'axios';\r\n\r\nclass PostEdit extends Component {\r\n\r\n    emptyItem = {\r\n        title: '',\r\n        body: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: \"\",\r\n            value: \"\",\r\n            item: this.emptyItem,\r\n            editorState: EditorState.createEmpty()\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        //this.onChangeRichTextEditor = this.onChangeRichTextEditor(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n    //    console.log(this.props.match.params.id)\r\n//        console.log(this.item);\r\n        var post;\r\n        this.state.id = this.props.location.state.params.id;\r\n        const promise = auth.verifyLogin();\r\n        if(promise === \"DONE\") {\r\n           if (this.state.id !== 'new') {\r\n               await axios.get(`/api/posts/${this.state.id}`,\r\n                   {\r\n                       headers: {\r\n                           'Accept': 'application/json',\r\n                           'Content-Type': 'application/json',\r\n                           'Authorization': authHeader()\r\n                               }\r\n                   }\r\n               ).then(response => {\r\n                   post = response.data;\r\n\r\n                   this.setState({item: post,\r\n                       editorState: EditorState.createWithContent(ContentState.createFromText(post.body))\r\n                   });\r\n               });\r\n\r\n           }\r\n        }\r\n        else if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) {\r\n                    if (this.state.id !== 'new') {\r\n                        axios.get(`/api/posts/${this.state.id}`,\r\n                            {\r\n                                headers: {\r\n                                    'Accept': 'application/json',\r\n                                    'Content-Type': 'application/json',\r\n                                    'Authorization': authHeader()\r\n                                        }\r\n                            }\r\n                        ).then(response => {\r\n                            post = response.data;\r\n\r\n                            const editorState =\r\n                                    EditorState.createWithContent(convertFromRaw(\r\n                                    JSON.parse(post.body)))\r\n\r\n                            this.setState({item: post,\r\n                                editorState: editorState\r\n                            });\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onChangeRichTextEditor = (newEditorState) =>{\r\n      this.setState({editorState: newEditorState});\r\n\r\n    }\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({item});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {item, editorState} = this.state;\r\n\r\n        item.body = JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));\r\n        console.log(item);\r\n        await fetch('/api/posts' + (item.id ? '/' + item.id : ''), {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            },\r\n            body: JSON.stringify(item),\r\n        });\r\n        this.props.history.push('/posts');\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"editor text\", editorState.getCurrentContent().getPlainText(''));\r\n        //const {editorStateUpdated} = this.state.editorState;\r\n        const heading = <h2>{this.state.item.id ? 'Edit Post' : 'New Post'}</h2>;\r\n\r\n        return <div>\r\n            <Container>\r\n                {heading}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"title\">Title</Label>\r\n                        <Input type=\"text\" name=\"title\" id=\"title\" value={this.state.item.title || ''}\r\n                               onChange={this.handleChange} autoComplete=\"title\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"body\">Body</Label>\r\n\r\n                        {this.onChangeRichTextEditor ?\r\n\r\n                            <RichTextEditor\r\n                                editorState={this.state.editorState}\r\n                                onChange={this.onChangeRichTextEditor}\r\n                            /> :\r\n                            <div/>\r\n                        }\r\n\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/posts\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\nexport default PostEdit;","import React, {Component, useState, useRef} from 'react';\r\nimport '../Styles/CommentBox.scss'\r\nimport cn from 'classnames';\r\n\r\nconst INITIAL_HEIGHT = 46;\r\nexport default class CommentBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const outerHeight = INITIAL_HEIGHT;\r\n        this.state = ({isExpanded: false});\r\n        this.onExpand = this.onExpand.bind(this);\r\n    }\r\n\r\n    onExpand = () => {\r\n\t\tif (!this.state.isExpanded) {\r\n          this.outerHeight = document.scrollHeight;\r\n          this.setState({isExpanded: true});\r\n        }\r\n\t}\r\n\r\n    render() {\r\n        const { commentValue, handleCommentValue,\r\n         enterCommentLine, submitCommentLine, onClose, isExpanded} = this.props;\r\n         this.state.isExpanded = isExpanded;\r\n         const enableCommentButton = () => {\r\n          return (commentValue ? false : true);\r\n        }\r\n         const changeCommentButtonStyle = () => {\r\n          return (commentValue ? \"comments-button-enabled\" :\r\n          \"comments-button-disabled\");\r\n        }\r\n\r\n\r\n        return (\r\n         <form\r\n             onSubmit={submitCommentLine}\r\n             onChange={handleCommentValue}\r\n             className={cn(\"comment-box\", {\r\n               expanded: isExpanded,\r\n               collapsed: !isExpanded,\r\n                    modified: commentValue.length > 0,\r\n             })}\r\n             style={{\r\n               minHeight: isExpanded ? this.outerHeight : INITIAL_HEIGHT\r\n             }}\r\n           >\r\n         <div className={'header headerComment'}>\r\n             <div className={'user'}>\r\n               <img\r\n                 src=\"avatar/path\"\r\n                 alt=\"User avatar\"\r\n               />\r\n               <span>User Name</span>\r\n             </div>\r\n           </div>\r\n         <div className={'header headerComment'}> ... </div>\r\n\r\n           <label className={'label labelComment'} htmlFor=\"comment\">What are your thoughts?</label>\r\n           <textarea\r\n\r\n             onClick={this.onExpand}\r\n             onFocus={this.onExpand}\r\n             onChange={handleCommentValue}\r\n             className=\"comment-field\"\r\n             placeholder=\"What are your thoughts?\"\r\n             value={commentValue}\r\n             name=\"comment\"\r\n             id=\"comment\"\r\n            />\r\n         <div className=\"actions\">\r\n             <button type=\"button\" className=\"cancel\" onClick={onClose}>\r\n               Cancel\r\n             </button>\r\n             <button type=\"submit\"  disabled={commentValue.length < 1}>\r\n               Enter\r\n             </button>\r\n         </div>\r\n         </form>\r\n         )\r\n\r\n    }\r\n}","import React, {Component, useState} from 'react';\r\nimport {Container, ListGroup, Button, Row, Col, FormLabel} from 'react-bootstrap';\r\nimport '../Styles/CommentBox.scss';\r\nimport Avatar from 'react-avatar';\r\nimport cn from 'classnames';\r\nimport moment from 'moment';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowAltCircleUp, faArrowAltCircleDown} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nclass CommentList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.commentListSorted = null;\r\n        this.state = {\r\n            isLoading: true,\r\n            commentCount: 0,\r\n            upVotes: 0,\r\n            downVotes: 0,\r\n            isUpVotingDisabled: false,\r\n            isDownVotingDisabled: false\r\n        }\r\n        this.commentList = null;\r\n    }\r\n\r\n\r\n    tallyVotes(votes) {\r\n        var upVoteCount = 0;\r\n        var downVoteCount = 0;\r\n        if(votes && votes.length > 0)\r\n        {\r\n            votes.forEach(vote => {\r\n                if(vote.voteType === \"UP\") upVoteCount++;\r\n                else if(vote.voteType === \"DOWN\") downVoteCount++;\r\n            })\r\n        }\r\n        console.log(\"Tallying votes\", upVoteCount, downVoteCount);\r\n        return {upVoteCount, downVoteCount};\r\n    }\r\n    refreshCommentList() {\r\n\r\n        const { role,\r\n            comments,\r\n            incrementDownVote,\r\n            incrementUpVote,\r\n            upVoteDisabled,\r\n            downVoteDisabled,\r\n            icons,\r\n            removeComment,\r\n            count,\r\n            currentUsername\r\n            } = this.props;\r\n        console.log(\"Comment list properties\", this.props);\r\n        //if(count === this.state.commentCount) return;\r\n\r\n        console.log(\"Refreshing the comment component\",comments, icons, role)\r\n        //console.log(\"Icon dictionary keys\", Object.keys(icons));\r\n        this.commentListSorted = comments.sort(function(a,b) {\r\n            return a.createdAt < b.createdAt ? -1 : 1;\r\n        });\r\n        var options = { month: 'long'};\r\n\r\n        this.commentList = this.commentListSorted.map(val => {\r\n            var options = { month: 'long'};\r\n            var d = new Date( val.createdAt * 1000);\r\n            var month = d.toLocaleDateString(\"en-US\", options);\r\n            var dateStr = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n            console.log(\"current comment in list\", val, icons[val.posterUsername]);\r\n            const {upVoteCount, downVoteCount} = this.tallyVotes(val.votes);\r\n            console.log(\"UpVotes\", upVoteCount);\r\n            console.log(\"DownVotes\", downVoteCount);\r\n\r\n            return (\r\n                <div>\r\n                <Container>\r\n                    <Row>\r\n                        {val.commentText ?\r\n                             <ListGroup.Item>\r\n                             {icons[val.posterUsername] ?\r\n                                 <Avatar round ={true}\r\n                                     borderRadius=\"50\"\r\n                                     size=\"50\"\r\n                                     name={val.posterName}\r\n                                     src={icons[val.posterUsername]}/>\r\n                                 :\r\n                                 <Avatar size=\"50\"\r\n                                     round={true}\r\n                                     name={val.posterName}/>\r\n                             }\r\n                             {val.commentName}\r\n                             <br/>\r\n                             {dateStr}\r\n                             <br/>\r\n                             {val.commentText}\r\n                             </ListGroup.Item> :\r\n                             <div/>\r\n                        }\r\n                    </Row>\r\n                        <Row alignItems=\"flex-end\">\r\n                            <Col>\r\n                                <Button\r\n                                        disabled={upVoteDisabled[val.id]}\r\n                                        size=\"sm\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => incrementUpVote(val.id)}>\r\n                                    <FontAwesomeIcon icon={faArrowAltCircleUp}/>\r\n                                </Button>\r\n                                <FormLabel> {upVoteCount !== 0 ? upVoteCount : \" \"}</FormLabel>\r\n\r\n                                <Button disabled =\r\n                                        {downVoteDisabled[val.id]}\r\n                                        size=\"sm\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => incrementDownVote(val.id)}>\r\n                                    <FontAwesomeIcon icon={faArrowAltCircleDown}/>\r\n                                </Button>\r\n                                <FormLabel> {downVoteCount !== 0 ? downVoteCount : \" \"} </FormLabel>\r\n                            </Col>\r\n                        </Row>\r\n                    <Row>\r\n\r\n                        <Col>\r\n                        {role === \"ROLE_ADMIN\" ?\r\n                            <Button size=\"sm\" color=\"danger\" onClick={\r\n                                () => removeComment(val.id)}>Delete</Button>\r\n                            : <div/>\r\n                        }\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.refreshCommentList();\r\n\r\n        this.setState({isLoading: false,\r\n            commentCount: this.commentList.length});\r\n\r\n    }\r\n    render() {\r\n\r\n        this.refreshCommentList();\r\n//        this.state.commentCount = this.commentList.length;\r\n        if(this.state.isLoading) return (<div/>);\r\n        return (\r\n              <Container>\r\n              <ListGroup>\r\n                {this.commentList}\r\n              </ListGroup>\r\n              </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentList;","import React, { Component, useState } from 'react';\r\nimport { Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button, Container, Card, CardHeader, CardTitle, CardBody, CardText, CardFooter, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport CommentBox from './CommentBox';\r\nimport CommentList from './CommentList';\r\nimport {authHeader} from '../helpers/auth-header'\r\nimport moment from 'moment';\r\nimport {authenticationService as auth} from '../services/authenticationService';\r\nimport {getImageService as getImgSvc} from '../services/getImageService';\r\nimport {getNameService as getNameSvc} from '../services/getNameService';\r\nimport {convertFromRaw} from 'draft-js';\r\nimport renderHTML from 'react-render-html';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\n\r\nlet commentCounter = 1;\r\n\r\nclass PostView extends Component {\r\n\r\n    emptyItem = {\r\n        title: '',\r\n        date: '',\r\n        body: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.currentRole = \"ROLE_GUEST\";\r\n        this.state = {\r\n            title: '',\r\n            date: '',\r\n            body: '',\r\n            commentValue: '',\r\n            comments: [],\r\n            icons: {},\r\n            currentCount: commentCounter,\r\n            votes: {},\r\n            usersVoted: {},\r\n            upVoteDisabled: {},\r\n            downVoteDisabled: {},\r\n            username: \"\",\r\n            isExpanded : false,\r\n            isLoading: true\r\n        }\r\n\r\n        this.handleCommentValue = this.handleCommentValue.bind(this);\r\n        this.enterCommentLine = this.enterCommentLine.bind(this);\r\n        this.submitCommentLine = this.submitCommentLine.bind(this);\r\n        this.onCommentClose = this.onCommentClose.bind(this);\r\n        this.setCommentLine = this.setCommentLine.bind(this);\r\n        this.removeComment = this.removeComment.bind(this);\r\n        this.incrementUpVote = this.incrementUpVote.bind(this);\r\n        this.incrementDownVote = this.incrementDownVote.bind(this);\r\n        this.updateUserVoted = this.updateUserVoted.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n    //    console.log(this.props.match.params.id)\r\n//        console.log(this.item);\r\n        //console.log(this.props.match.params.id);\r\n        this.state.username = auth.getUsernameFromJWT();\r\n\r\n        const promise = auth.verifyLogin();\r\n        if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) this.getPostAndComments();\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    async getPostAndComments() {\r\n        this.currentRole = getNameSvc.currentRoleValue.roleName;\r\n            //console.log(\"ComponentDidMount currentRole\", this.currentRole);\r\n        var state = {\r\n            title: \"\",\r\n            date: \"\",\r\n            body: \"\",\r\n            comments: {},\r\n            icons: {},\r\n            currentCount: 0,\r\n            votes: {},\r\n            usersVoted: {},\r\n            upVoteDisabled: {},\r\n            downVoteDisabled: {}\r\n        }\r\n        await axios.get(`/api/posts/${this.props.location.state.params.id}`,\r\n        {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n        }).then(response => {\r\n        state.title = response.data.title;\r\n        state.date = response.data.modifiedAt;\r\n        state.body = response.data.body;\r\n        state.comments = response.data.comments;\r\n        console.log(state.comments);\r\n\r\n        }).catch(err => {console.log(err)});\r\n        //occasionally a lone comment is deleted, leaving a null reference\r\n        //to comments in the parent Post Object, which needs to be discarded\r\n        if(state.comments && state.comments[0] === null) state.comments.pop();\r\n        if(state.comments && state.comments[0]) {\r\n        const usernameSet = new Set();\r\n        const imageSet = new Set();\r\n\r\n            state.comments.map(comment => {\r\n                    //console.log(\"Comment:\", comment);\r\n                    state.currentCount++;\r\n                    state.votes[comment.id] = comment.votes;\r\n                    state.usersVoted[comment.id] = {};\r\n                    if(comment.usersVoted !== null && Object.keys(comment.usersVoted).length >= 0)\r\n                    {\r\n\r\n                        state.usersVoted[comment.id] =\r\n                            comment.usersVoted[comment.id];\r\n                    }\r\n                    else state.usersVoted[comment.id][comment.posterUsername] = false;\r\n                    usernameSet.add(comment.posterUsername)\r\n            });\r\n\r\n\r\n            //when page is first loaded, ensure correct upvote and downvote buttons\r\n            //are enabled for the current user\r\n            state.comments.forEach(comment => {\r\n                state.upVoteDisabled[comment.id] = false;\r\n                state.downVoteDisabled[comment.id] = false;\r\n                if(comment.votes) {\r\n                    comment.votes.forEach(vote => {\r\n                        if(vote.username === this.state.username) {\r\n                            if(vote.voteType === \"UP\") {\r\n                                state.upVoteDisabled[comment.id] = true;\r\n                            }\r\n                            else if(vote.voteType === \"DOWN\") {\r\n                                state.downVoteDisabled[comment.id] = true;\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n            var usernameArr = Array.from(usernameSet);\r\n            var index = 0;\r\n            console.log(usernameArr);\r\n            await usernameArr.forEach(username => {\r\n                axios.get(`/api/getImage/${username}`, {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': authHeader()\r\n                    }\r\n\r\n                }).then(response => {\r\n                    if(response.data){\r\n                        console.log(\"image received\", response.data);\r\n                        var key = response.data.username;\r\n                        state.icons[key] = response.data.strBase64File;\r\n\r\n                    }\r\n                    index++;\r\n                    //call render when all images have been retrieved from the server\r\n\r\n                    if(index === usernameArr.length) {\r\n                        //update the commentCounter\r\n                        commentCounter = state.currentCount;\r\n                        this.setState({\r\n                            title: state.title,\r\n                            date: state.date,\r\n                            body: state.body,\r\n                            comments: state.comments,\r\n                            icons: state.icons,\r\n                            currentCount: state.currentCount,\r\n                            upVoteDisabled: state.upVoteDisabled,\r\n                            downVoteDisabled: state.downVoteDisabled,\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n\r\n                });\r\n            })\r\n\r\n        }\r\n        else {\r\n            var imageData = getImgSvc.currentImageValue;\r\n            state.icons[imageData.username] = imageData.strBase64File;\r\n            //update the commentCounter\r\n            commentCounter = state.currentCount;\r\n            var votes = null;\r\n            var usersVoted = null;\r\n            this.setState({\r\n                title: state.title,\r\n                date: state.date,\r\n                body: state.body,\r\n                comments: state.comments,\r\n                icons: state.icons,\r\n                votes: votes,\r\n                usersVoted : usersVoted,\r\n                currentCount: state.currentCount,\r\n                isLoading: false\r\n            });\r\n        }\r\n\r\n    }\r\n    handleCommentValue = (e) => {\r\n        this.setState({commentValue: e.target.value});\r\n    }\r\n    async incrementUpVote(id) {\r\n        console.log(\"Attempting to increment vote for\", this.state.username, id);\r\n        const vote = {\r\n            id: null,\r\n            postId: this.props.location.state.params.id,\r\n            commentId: id,\r\n            username:  this.state.username,\r\n            voteType: \"UP\",\r\n\r\n        }\r\n        this.state.comments = this.updateCommentsWithVote(vote);\r\n        await this.setCommentWithVotes(id);\r\n        this.state.upVoteDisabled[id] = true;\r\n        this.state.downVoteDisabled[id] =  false;\r\n        this.setState({});\r\n\r\n\r\n    }\r\n\r\n    async incrementDownVote(id){\r\n          console.log(\"Attempting to decrement vote for\", this.state.username, id);\r\n\r\n           const vote = {\r\n                id: null,\r\n                postId: this.props.location.state.params.id,\r\n                commentId: id,\r\n                username:  this.state.username,\r\n                voteType: \"DOWN\",\r\n\r\n            }\r\n\r\n            this.state.comments = this.updateCommentsWithVote(vote);\r\n            await this.setCommentWithVotes(id);\r\n            this.state.upVoteDisabled[id] = false;\r\n            this.state.downVoteDisabled[id] =  true;\r\n            this.setState({});\r\n\r\n    }\r\n\r\n    updateCommentsWithVote(vote) {\r\n        //get existing vote for this user on this comment\r\n        let existingVote = null;\r\n        let updatedComments = null;\r\n        let votes = [];\r\n        let vote_pushed = false;\r\n        this.state.comments.forEach(comment => {\r\n            if(comment.id === vote.commentId) {\r\n                if(comment.votes) {\r\n                    comment.votes.forEach(tmp_vote => {\r\n                        if(tmp_vote.username === this.state.username) {\r\n                            votes.push(vote);\r\n                            vote_pushed = true;\r\n                        }\r\n                        else votes.push(tmp_vote)\r\n                    })\r\n                }\r\n                if(!vote_pushed) votes.push(vote);\r\n\r\n            }\r\n        })\r\n        console.log(\"Before updating votes\", this.state.comments, votes);\r\n        updatedComments = this.state.comments.map(comment => {\r\n            console.log(\"Current comment\", comment);\r\n            if(comment.id === vote.commentId) comment.votes = votes;\r\n            return comment;\r\n        })\r\n        console.log(\"After updating votes\", updatedComments, votes);\r\n        return updatedComments;\r\n    }\r\n    updateUserVoted(id, val) {\r\n\r\n        this.state.usersVoted[id][this.state.username] = val;\r\n    }\r\n    async setCommentWithVotes(id) {\r\n        var comment = null;\r\n        this.state.comments.forEach(com => {\r\n            if(com.id === id) comment = com;\r\n        })\r\n        var savedComment = await this.submitComment(comment);\r\n        var newComment = {\r\n            id: savedComment.id,\r\n            posterName: savedComment.posterName,\r\n            posterUsername: savedComment.posterUsername,\r\n            createdAt: savedComment.createdAt,\r\n            commentText: savedComment.commentText,\r\n            votes: savedComment.votes[savedComment.id],\r\n            usersVoted: savedComment.usersVoted\r\n        }\r\n\r\n        //modify existing comment to update votes and usersVoted\r\n        if(this.state.comments) {\r\n            var index  = this.state.comments.findIndex(comment => comment.id === id)\r\n            if(index >= 0) {\r\n               this.state.comments.splice(index, 1)\r\n               this.state.comments.push(savedComment);\r\n            }\r\n            else this.state.comments.push(savedComment);\r\n//            this.state.comments.push(newComment);\r\n        }\r\n\r\n        if(Object.keys(this.state.votes) > 0)\r\n            this.state.votes[id] = savedComment.votes;\r\n        else {\r\n            this.state.votes = {};\r\n            this.state.votes[id] = savedComment.votes;\r\n        }\r\n        if(Object.keys(this.state.usersVoted) > 0)\r\n            this.state.usersVoted[id] = savedComment.usersVoted;\r\n        else {\r\n            this.state.usersVoted = {}\r\n            this.state.usersVoted[id] = savedComment.usersVoted;\r\n        }\r\n//        var img = getImgSvc.currentImageValue\r\n//\r\n//        this.state.icons[savedComment.posterUsername] = img;\r\n        this.setState({\r\n          commentValue: \"\"\r\n        });\r\n    }\r\n    async setComment() {\r\n        commentCounter++;\r\n\r\n        var comment = {\r\n            id: null,\r\n            postId: this.props.match.params.id,\r\n            posterName: getNameSvc.currentNameValue,\r\n            posterUsername: auth.getUsernameFromJWT(),\r\n            commentText: this.state.commentValue,\r\n            votes: null,\r\n            usersVoted: null\r\n        }\r\n        var savedComment = await this.submitComment(comment);\r\n        var newComment = {\r\n            id: savedComment.id,\r\n            posterName: savedComment.posterName,\r\n            posterUsername: savedComment.posterUsername,\r\n            createdAt: savedComment.createdAt,\r\n            commentText: savedComment.commentText,\r\n            votes: savedComment.votes,\r\n            usersVoted: savedComment.usersVoted\r\n        }\r\n\r\n        if(this.state.comments) this.state.comments.push(newComment);\r\n        else{\r\n            this.state.comments = [];\r\n            this.state.comments.push(newComment);\r\n        }\r\n        if(this.state.votes) this.state.votes[newComment.id] = null;\r\n        else{\r\n            this.state.votes = {};\r\n            this.state.votes[newComment.id]  = null;\r\n        }\r\n\r\n        var img = getImgSvc.currentImageValue\r\n\r\n        this.state.icons[savedComment.posterUsername] = img;\r\n        console.log(\"usersVoted Undefined setComment Function?\", this.state.usersVoted);\r\n        if(this.state.usersVoted == null || typeof(this.state.usersVoted) === 'undefined')\r\n        {\r\n            this.state.usersVoted = {}\r\n            this.state.usersVoted[newComment.id] = {};\r\n            this.state.usersVoted[newComment.id][this.state.username] = false;\r\n        }\r\n        console.log(\"usersVoted after bsetComment Function?\", this.state.usersVoted);\r\n        this.setState({\r\n          commentValue: \"\"\r\n\r\n        });\r\n\r\n    }\r\n    setCommentLine() {\r\n        //console.log(\"username\",auth.getUsernameFromJWT());\r\n        const promise = auth.verifyLogin();\r\n        if(promise) {\r\n            promise.then(result => {\r\n                const resolved = result;\r\n                if(localStorage.getItem('currentUser')) this.setComment();\r\n            })\r\n        } else console.log(\"Could not verify login credentials\");\r\n\r\n\r\n\r\n        console.log(\"Upon comment submit\", this.state.comments);\r\n\r\n    }\r\n\r\n    async submitComment(comment) {\r\n        var savedComment = \"\";\r\n\r\n        const updatedComment = JSON.stringify(comment);\r\n        console.log(\"Comment to put\", updatedComment);\r\n//        await fetch(`/api/posts/comments/${this.props.location.state.params.id}`,{\r\n//                method: 'post',\r\n//                body: updatedComment,\r\n//                 headers: {\r\n//                    'Accept': 'application/json',\r\n//                    'Content-Type': 'application/json',\r\n//                    'Authorization': authHeader()\r\n//            },\r\n//        }).then(response => {\r\n//            savedComment  = response.data;\r\n//\r\n//\r\n//        }).catch(err => {\r\n//            console.log(err)\r\n//        });\r\n        await axios({\r\n            method: 'post',\r\n            url: `/api/posts/comments/${this.props.location.state.params.id}`,\r\n            data: updatedComment,\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n        }).then(response => {\r\n            savedComment = response.data;\r\n        }).catch(err => {\r\n            console.log(\"PutComment error\", err);\r\n        });\r\n        console.log(\"SubmitComment\", savedComment);\r\n        return savedComment;\r\n    }\r\n\r\n    async getIconImage(username) {\r\n        await axios.get(`/api/getImage/${username}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': authHeader()\r\n            }\r\n\r\n        }).then(response => {\r\n\r\n            return response.data.strBase64File;\r\n        })\r\n    }\r\n    submitCommentLine = (e) => {\r\n         e.preventDefault();\r\n         this.setCommentLine();\r\n    };\r\n    enterCommentLine = (e) => {\r\n\r\n         if (e.charCode === 13) {\r\n          this.setCommentLine();\r\n         }\r\n    };\r\n\r\n    onCommentClose = () => {\r\n\r\n        this.setState({commentValue: \"\", isExpanded: false});\r\n    }\r\n\r\n    async removeComment(id) {\r\n        var currComments = this.state.comments;\r\n        var currCommentCount = 0;\r\n        var index = 0;\r\n        var commentIndex = 0;\r\n        currComments.forEach(comment => {\r\n            if(comment.id === id) commentIndex = index;\r\n            index++;\r\n        })\r\n\r\n        if(index >= 0) {\r\n            //update all other commentId's by decrementing higher id's by one\r\n\r\n            if(currComments.length === 1) currComments = [];\r\n            else {\r\n                currComments.splice(commentIndex, 1);\r\n\r\n            }\r\n            commentCounter--;\r\n            await axios.delete(`/api/posts/comments/${id}`, {\r\n                headers: {'Authorization': authHeader()}\r\n\r\n            }).then(response => {\r\n                //console.log(\"removeComment successful\");\r\n                this.setState({comments: currComments})\r\n            })\r\n        }\r\n        else console.log(\"Could not find comment to delete\");\r\n\r\n    }\r\n//\r\n//    handleChange(event) {\r\n//        const target = event.target;\r\n//        const value = target.value;\r\n//        const name = target.name;\r\n//        let item = {...this.state.item};\r\n//        item[name] = value;\r\n//        this.setState({item});\r\n//    }\r\n\r\n\r\n    render() {\r\n        const {title,\r\n            date,\r\n            body,\r\n            commentValue,\r\n            comments,\r\n            upVoteDisabled,\r\n            downVoteDisabled,\r\n            icons,\r\n            isExpanded,\r\n            isLoading} = this.state;\r\n//        var comments = rawComments;\r\n//        if(comments && comments.length > 0 && comments[0] === '') comments.shift();\r\n//        if(comments && comments.length === 0) comments = [];\r\n        console.log(\"render state\", this.state);\r\n        //console.log(\"render props\", this.incrementUpVote, this.incrementDownVote);\r\n        //console.log(\"Icon dictionary keys\", Object.keys(icons));\r\n        if(isLoading) { return <div/>}\r\n\r\n        var bodyHTML = stateToHTML(convertFromRaw(JSON.parse(body)));\r\n        var options = { month: 'long'};\r\n\r\n        var currentRole = this.currentRole;\r\n        var d = new Date( date * 1000);\r\n        var month = d.toLocaleDateString(\"en-US\", options);\r\n        var dateStr = month + \", \" + moment(d).format(\"Do, YYYY, h:mm a\");\r\n        return <div>\r\n            <Container>\r\n                <Card>\r\n                <CardHeader>\r\n                    <CardTitle>\r\n                        <h2><em>{title}</em></h2>\r\n                        {dateStr}\r\n                    </CardTitle>\r\n\r\n                </CardHeader>\r\n                <CardBody>\r\n\r\n                    <CardText>{renderHTML(bodyHTML)}</CardText>\r\n                </CardBody>\r\n\r\n                </Card>\r\n                <CommentBox\r\n                    commentValue = {commentValue}\r\n                    handleCommentValue = {this.handleCommentValue}\r\n                    enterCommentLine = {this.enterCommentLine}\r\n                    submitCommentLine = {this.submitCommentLine}\r\n                    onClose = {this.onCommentClose}\r\n                    isExpanded = {this.isExpanded}\r\n                 />\r\n                 {(typeof(comments) !== 'undefined' && comments && comments.length > 0) ?\r\n                    <div>\r\n\r\n                        <CommentList\r\n                            role = {currentRole}\r\n                            comments={comments}\r\n                            incrementUpVote = {this.incrementUpVote}\r\n                            incrementDownVote = {this.incrementDownVote}\r\n                            upVoteDisabled = {upVoteDisabled}\r\n                            downVoteDisabled = {downVoteDisabled}\r\n                            icons={icons}\r\n                            removeComment = {this.removeComment}\r\n                            count = {comments.length}\r\n                            currentUsername = {this.state.username}\r\n                            />\r\n\r\n                    </div> :\r\n                    <div/>\r\n                 }\r\n                 <Button color=\"primary\" tag={Link} to=\"/posts\">Return to Posts</Button>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\nexport default PostView;","import {authenticationService as auth} from '../services/authenticationService';\r\nimport {Route, Navigate} from 'react-router-dom';\r\nexport const PrivateRoute = ({ comp: Component, ...rest }) =>\r\n  (\r\n    <Route {...rest} render={(props) => {\r\n\r\n      return auth.loggedIn === true\r\n        ? <Component {...props}/>\r\n        : <Navigate to='/'/>\r\n    }} />\r\n  );\r\n","import {authenticationService as auth} from '../services/authenticationService';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nexport const CustomRoute = ({ comp: Component, ...rest }) =>\r\n  (\r\n    <Route {...rest} render={(props) => {\r\n\r\n       if(rest.path === '/' && auth.loggedIn    ) auth.logout();\r\n       else return <Component {...props}/>\r\n    }} />\r\n  );","import React, {Component} from 'react';\r\nimport { Router, Route, Routes} from 'react-router-dom';\r\nimport { MemoryRouter } from 'react-router';\r\nimport Home from './Pages/Home';\r\nimport Posts from './Pages/Posts'\r\nimport Profile from './Pages/Profile'\r\nimport RegistrationSuccess from './Pages/RegistrationSuccess';\r\nimport RegistrationForm from './auth/RegistrationForm';\r\nimport LoginForm from './auth/LoginForm';\r\nimport UserModal from './Components/UserModal';\r\nimport PostEdit from \"./Components/PostEdit\";\r\nimport PostView from \"./Components/PostView\";\r\nimport AppNavbar from \"./Components/AppNavbar\";\r\nimport history from \"./Components/history\";\r\nimport {PrivateRoute} from './Routes/PrivateRoute';\r\nimport {CustomRoute} from './Routes/CustomRoute';\r\nexport default class InnerApp extends React.PureComponent{\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Router history={history}>\r\n                  <div>\r\n                  <AppNavbar/>\r\n                  <Routes>\r\n                    <CustomRoute path='/' exact={true} comp={Home}/>\r\n                    <PrivateRoute exact={true} path='/posts' comp={Posts}/>\r\n                    <PrivateRoute exact={true} path='/posts/edit/' comp={PostEdit}/>\r\n                    <PrivateRoute exact={true} path='/posts/view/' comp={PostView}/>\r\n                    <PrivateRoute exact={true} path='/registration' comp={RegistrationSuccess}/>\r\n                    <PrivateRoute exact={true} path='/profile' comp={Profile}/>\r\n                  </Routes>\r\n                  </div>\r\n                </Router>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//     <Toast onClose={this.setHideToast} show={this.state.showToast} delay={3000} autohide>\r\n//                                  <Toast.Header>\r\n//                                    <strong className=\"me-auto\">Bootstrap</strong>\r\n//                                    <small>11 mins ago</small>\r\n//                                  </Toast.Header>\r\n//                                  <Toast.Body>\"Woohoo, you're reading this text in a Toast!\"</Toast.Body>\r\n//                             </Toast>","import React, { Component, useState } from 'react';\nimport './Styles/App.scss'\nimport {createContext, useContext} from \"react\";\nimport {authenticationService as auth} from \"./services/authenticationService\";\nimport InnerApp from \"./InnerApp\";\n//export function useAuth(){\n//    return useContext(AuthContext);\n//}\n\n\nfunction App(props) {\n//    const [showModal, setShowModal] = useState(false);\n//    subscribeModal.subscribe(() => {\n//        setShowModal(prev => !prev);\n//    })\n\n    const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n    const [authTokens,setAuthTokens] = useState(existingTokens || null);\n\n    const setTokens = (data) => {\n        console.log(\"setting tokens in localStorage\");\n        localStorage.setItem(\"tokens\",JSON.stringify(data));\n        setAuthTokens(data);\n    }\n    return(\n\n            <InnerApp/>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}